<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔓羊</title>
  
  <subtitle>梦想还是要有的，万一见鬼了呢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-16T10:49:53.172Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yagmdream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack-TypeScript-18</title>
    <link href="http://yoursite.com/2019/08/16/webpack-TypeScript-18/"/>
    <id>http://yoursite.com/2019/08/16/webpack-TypeScript-18/</id>
    <published>2019-08-16T06:24:31.000Z</published>
    <updated>2019-08-16T10:49:53.172Z</updated>
    
    <content type="html"><![CDATA[<p><code>TypeScript</code>是<code>javascript</code>的扩展语言，可以规范我们的代码，并对代码进行相应的报错提示。可以有效提升javascript代码的可维护性。这篇来看下在webpack中的配置。<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener"><font color="#42A8E1">TypeScript官方文档</font></a>.</p><h3 id="1-typescript打包配置"><a class="header-anchor" href="#1-typescript打包配置">¶</a>1. typescript打包配置</h3><p><strong>创建一个文件夹typeScript并初始化。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y  <span class="comment">// 初始化文件夹</span></span><br><span class="line">npm install webpack webpack-cli -save-dev     <span class="comment">// 安装webpack以及webpack-cli脚手架</span></span><br></pre></td></tr></table></figure><p>在文件夹下面新建<code>src</code>文件夹和<code>webpack.config.js</code>，<code>index.tsx</code>，typescript目录结构如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ |- node-modules</span></span><br><span class="line"><span class="addition">+ |- src</span></span><br><span class="line"><span class="addition">+     |- index.tsx</span></span><br><span class="line"><span class="addition">+ |- package.json</span></span><br><span class="line"><span class="addition">+ |- package-lock.json</span></span><br><span class="line"><span class="addition">+ |- webpack.config.js</span></span><br></pre></td></tr></table></figure><p><strong>index.tsx</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 定义Greeter类。并创建button按钮点击在弹窗跳出Say Hello</span></span><br><span class="line"><span class="addition">+ class Greeter &#123;</span></span><br><span class="line"><span class="addition">+     greeting: string;</span></span><br><span class="line"><span class="addition">+     constructor(message: string) &#123; </span></span><br><span class="line"><span class="addition">+         this.greeting = message;</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+     greet() &#123;</span></span><br><span class="line"><span class="addition">+         return "hello, " + this.greeting</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ let greeter = new Greeter("world");</span></span><br><span class="line"><span class="addition">+ alert(greeter.greet());</span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const path = require('path');</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ module.exports = &#123;</span></span><br><span class="line"><span class="addition">+     mode: 'production',</span></span><br><span class="line"><span class="addition">+     entry: './src/index.tsx',</span></span><br><span class="line"><span class="addition">+     module: &#123;</span></span><br><span class="line"><span class="addition">+         rules: [&#123;</span></span><br><span class="line"><span class="addition">+             test: /\.tsx?$/,   // 配置tsx文件打包规则</span></span><br><span class="line"><span class="addition">+             use: 'ts-loader',</span></span><br><span class="line"><span class="addition">+             exclude: /node_modules/,</span></span><br><span class="line"><span class="addition">+         &#125;],</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     output: &#123;</span></span><br><span class="line"><span class="addition">+         filename: 'bundle.js',</span></span><br><span class="line"><span class="addition">+         path: path.resolve(__dirname, 'dist'),</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p>上面我们打包tsx文件需要用到<code>ts-loader</code>,还需要安装<code>typescript</code>。现在安装下： <code>npm install ts-loader typescript --save-dev</code>。</p><blockquote><p>这里要注意的是，在打包ts文件时，一定要在项目根目录下新建<code>tsconfig.json</code>。<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener"><font color="#42A8E1">tsconfig.json文档</font></a>。为了更好的设置tsx编译所需的参数而存在的文件。</p></blockquote><p><strong>tsconfig.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ &#123;</span></span><br><span class="line"><span class="addition">+     "compilerOptions": &#123;</span></span><br><span class="line"><span class="addition">+         "outDir": "./dist",   // 打包输出路径，写不写都行，webpack.config.js已配置</span></span><br><span class="line"><span class="addition">+         "module": "es6",   // 引入包用的是es6的</span></span><br><span class="line"><span class="addition">+         "target": "es5",   // 转化成最终的语法，这里将打包文件转化成es5的语法</span></span><br><span class="line"><span class="addition">+         "allowJs": true,   // 允许在typescript文件中引入js模块的文件</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>配置package.json打包命令</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ "scripts": &#123;</span></span><br><span class="line"><span class="addition">+     "build": "webpack"  </span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br></pre></td></tr></table></figure><p>配置完成后，执行打包命令 <code>npm run build</code>。打包完成，将生成的<code>bundle.js</code>文件复制到浏览器控制台，回车。可以看到网页弹出<code>hello world</code><br><img src="/images/webpack/46.png" alt="Alt"></p><h3 id="2-typescript-中引入第三方库-配置相应的语法提示"><a class="header-anchor" href="#2-typescript-中引入第三方库-配置相应的语法提示">¶</a>2.typescript 中引入第三方库，配置相应的语法提示</h3><p><strong>安装 lodash, @types/lodash</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ npm install lodash --save-dev   // 安装lodash 插件</span></span><br><span class="line"><span class="addition">+ npm install @types/lodash --save-dev  // 安装第三方语法检测插件</span></span><br></pre></td></tr></table></figure><p><strong>index.tsx</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 定义Greeter类。并创建button按钮点击在弹窗跳出Say Hello</span><br><span class="line"><span class="addition">+ import * as _ from 'lodash';    // ts文件中引入第三方模块必须重命名引入，不然会报错</span></span><br><span class="line"></span><br><span class="line">class Greeter &#123;</span><br><span class="line">    greeting: string;</span><br><span class="line">    constructor(message: string) &#123; </span><br><span class="line">        this.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line"><span class="deletion">-        // return "hello, " + this.greeting</span></span><br><span class="line"><span class="addition">+        return _.join(['hello', this.greeting], '');</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let greeter = new Greeter("world");</span><br><span class="line">alert(greeter.greet());</span><br></pre></td></tr></table></figure><p>这样就配置好了第三方语法检测。如果安装jquery语法检测，就需要安装<code>@types/jquery</code>。那么如何知道这个插件是否存在呢。进入<a href="https://github.com/" target="_blank" rel="noopener"><font color="#42A8E1">github</font></a>，搜索<code>types</code>找<code>DefinitelyTyped/DefinitelyTyped</code>，点击进入到<code>types</code>搜索页面。就可以搜索你想要的类型检测插件。在点进去的页面上找<code>TypeSearch</code><img src="/images/webpack/47.png" alt="Alt"><img src="/images/webpack/48.png" alt="Alt"><img src="/images/webpack/49.png" alt="Alt"><img src="/images/webpack/50.png" alt="Alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt;是&lt;code&gt;javascript&lt;/code&gt;的扩展语言，可以规范我们的代码，并对代码进行相应的报错提示。可以有效提升javascript代码的可维护性。这篇来看下在webpack中的配置。&lt;a href=&quot;https://w
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-library打包-17</title>
    <link href="http://yoursite.com/2019/08/15/webpack-library%E6%89%93%E5%8C%85-17/"/>
    <id>http://yoursite.com/2019/08/15/webpack-library打包-17/</id>
    <published>2019-08-15T04:56:16.000Z</published>
    <updated>2019-08-16T03:03:51.850Z</updated>
    
    <content type="html"><![CDATA[<p>我们一般都是进行业务开发。那么如果想做一个库文件，供大家使用，webpack该如何打包呢？接着往下看</p><h3 id="1-编写打包文件"><a class="header-anchor" href="#1-编写打包文件">¶</a>1.编写打包文件</h3><p>新建一个项目，如<code>library</code>。进入到library目录下，执行<code>npm init -y</code>初始化文件夹。在文件夹下新建src文件夹。并新建文件<code>math.js</code>,<code>str.js</code>， index.js。</p><p><strong>执行npm init -y</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y    <span class="comment">//初始化文件</span></span><br></pre></td></tr></table></figure><p><strong>先来看下目录结构</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ |- node-modules</span></span><br><span class="line"><span class="addition">+ |- src</span></span><br><span class="line"><span class="addition">+     |- index.js</span></span><br><span class="line"><span class="addition">+     |- math.js</span></span><br><span class="line"><span class="addition">+     |- str.js</span></span><br><span class="line"><span class="addition">+ |- package.json</span></span><br><span class="line"><span class="addition">+ |- package-lock.json</span></span><br><span class="line"><span class="addition">+ |- webpack.config.js</span></span><br></pre></td></tr></table></figure><p><strong>math.js 导出计算方法</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ export function add(a, b)&#123;</span></span><br><span class="line"><span class="addition">+     return a + b</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ export function minus(a, b)&#123;</span></span><br><span class="line"><span class="addition">+     return a - b</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ export function multiply(a, b)&#123;</span></span><br><span class="line"><span class="addition">+     return a * b</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ export function division(a, b)&#123;</span></span><br><span class="line"><span class="addition">+     return a / b</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>str.js 导出字符串拼接方法</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ export function join(a, b)&#123;</span></span><br><span class="line"><span class="addition">+     return a + ''+ b;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import * as math from './math.js';</span></span><br><span class="line"><span class="addition">+ import * as str from './str.js'</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ export default &#123; math, str &#125;</span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js, 默认的配置文件</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const path = require('path');</span></span><br><span class="line"><span class="addition">+ const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');   // 方便我们重复打包文件的更新</span></span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');     // 打包文件自动生成入口页面文件</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ module.exports = &#123;</span></span><br><span class="line"><span class="addition">+     mode: 'production',   </span></span><br><span class="line"><span class="addition">+     entry: './src/index.js',   </span></span><br><span class="line"><span class="addition">+     output: &#123;</span></span><br><span class="line"><span class="addition">+         path: path.resolve(__dirname, 'dist'),    </span></span><br><span class="line"><span class="addition">+         filename: 'library.js', </span></span><br><span class="line"><span class="addition">+         library: 'library',     // 类库名称</span></span><br><span class="line"><span class="addition">+         libraryTarget: 'umd',   // 初始化类库加载方式，默认为AMD。包含CommonJS， CMD</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     plugins: [</span></span><br><span class="line"><span class="addition">+         new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+             title: 'test',</span></span><br><span class="line"><span class="addition">+         &#125;),</span></span><br><span class="line"><span class="addition">+         new CleanWebpackPlugin(),</span></span><br><span class="line"><span class="addition">+     ]</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>编写类库<code>library</code>和<code>libraryTarget</code>这两个配置一般都要写上。umd是初始化类库加载方式，我们编写的库文件直接打包是无法让别人使用的。需要umd将我们的库暴露出去。这样才可以被调用。如果想在页面直接用<code>script</code>的方式直接引入，则需配置<code>library: 'library'</code>。</p></blockquote><p><strong>package.json 配置打包命令</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "library",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+    "build": "webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "yagm",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "dependencies": &#123;</span><br><span class="line">    "webpack": "^4.39.2",</span><br><span class="line">    "webpack-cli": "^3.3.6"</span><br><span class="line">  &#125;,</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "clean-webpack-plugin": "^3.0.0",</span><br><span class="line">    "html-webpack-plugin": "^3.2.0"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的配置我们使用了清除文件插件<code>clean-webpack-plugin</code>与自动生成入口页面文件<code>html-webpack-plugin</code>。所以要记得安装这两个插件。<br><code>npm install --save-dev clean-webpack-plugin</code>, <code>npm install --save-dev html-webpack-plugin</code>。</p></blockquote><p>配置完成后，执行打包命令<code>npm run build</code>。在浏览器打开生成的index.html文件。打开控制台，输入<code>library</code>，回车，可以看到<code>math</code>和<code>str</code>文件中的方法都被成功打印。<br><img src="/images/webpack/43.png" alt="Alt"></p><h3 id="2-externals"><a class="header-anchor" href="#2-externals">¶</a>2.externals</h3><p>当我们在类库文件中引入<code>lodash</code>,用户在使用我们的库的同时，自己也引入了<code>lodash</code>这个库，那么就会打包2份<code>lodash</code>。这无疑让打包文件变的更大。<br>那么<code>externals</code>，就是解决这个问题的。</p><blockquote><p><code>externals</code>当库文件和用户文件同时引入一些库时，将库名列入到<code>externals</code>配置中。那么，库文件就只在用户文件中进行引用。打包一次即可。</p></blockquote><p><strong>修改 str.js</strong></p><blockquote><p>安装<code>lodash</code>， <code>npm install lodash --save</code></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import _ from 'lodash'</span></span><br><span class="line">export function join(a, b)&#123;</span><br><span class="line"><span class="addition">+    return _.join([a,  b], '')</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行打包命令 npm run build</strong><br><img src="/images/webpack/44.png" alt="Alt"><br>library.js文件打包的大小为71.2kb</p><p><strong>设置externals</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const path = require('path');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'production',</span><br><span class="line">    entry: './src/index.js',</span><br><span class="line"><span class="addition">+    externals: ['lodash'],</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, 'dist'),</span><br><span class="line">        filename: 'library.js',</span><br><span class="line">        library: 'library',</span><br><span class="line">        libraryTarget: 'umd',</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'test',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行打包命令 npm run build</strong><br><img src="/images/webpack/45.png" alt="Alt"><br>library.js文件打包的大小为1.63kb。这样就实现了单次打包库文件。</p><h3 id="3-包发布"><a class="header-anchor" href="#3-包发布">¶</a>3.包发布</h3><p>我们写好的库文件，别人要怎么下载使用呢？将打包的文件上传到git,将package.json文件的main入口改成git的下载地址。打开npm官网，注册账号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm adduser &lt;你的用户名&gt;   <span class="comment">// npm 上添加你的用户名</span></span><br><span class="line">npm publish               <span class="comment">// npm发布包</span></span><br><span class="line">npm install               <span class="comment">// 别人使用，直接下载安装</span></span><br></pre></td></tr></table></figure><blockquote><p>这篇文章只是简单的记录下如何编写库文件以及发布包。正常写一个库文件 需要很多配置。希望大家不要随便上传一些无用的包。尽量维护npm社区包的质量。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们一般都是进行业务开发。那么如果想做一个库文件，供大家使用，webpack该如何打包呢？接着往下看&lt;/p&gt;
&lt;h3 id=&quot;1-编写打包文件&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-编写打包文件&quot;&gt;¶&lt;/a&gt;1.编写打包文件&lt;/h3&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-环境变量-16</title>
    <link href="http://yoursite.com/2019/08/12/webpack-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-16/"/>
    <id>http://yoursite.com/2019/08/12/webpack-环境变量-16/</id>
    <published>2019-08-12T02:39:12.000Z</published>
    <updated>2019-08-15T04:41:13.803Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的章节中，我们学到了有关于在配置环境中，如何区分开发环境与生产环境。但在源代码中还是不能区分开发环境与生产环境。事实上，我们经常会碰到开发环境中使用这个域名： <code>http://test.api.com</code>。正式环境中使用另一个域名：<code>http://prod.api.com</code>。所以，<code>webpack</code>提供了<a href="https://webpack.docschina.org/plugins/define-plugin/" target="_blank" rel="noopener"><font color="#42A8E1">DefinePlugin<font></font></font></a>插件。</p><blockquote><p><code>DefinePlugin</code> 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。如果在开发构建中，而不在发布构建中执行日志记录，则可以使用全局常量来决定是否记录日志。这就是 DefinePlugin 的用处，设置它，就可以忘记开发环境和生产环境构建的规则。</p></blockquote><h3 id="1-安装"><a class="header-anchor" href="#1-安装">¶</a>1.安装</h3><p><code>DefinePlugin</code>是<code>webpack</code>的插件。所以我们需要安装<code>webpack</code>，如果前面安装过则无需安装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a class="header-anchor" href="#2-修改配置文件">¶</a>2.修改配置文件</h3><p><strong>修改webpack.dev.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 开发环境配置</span><br><span class="line"> * </span><br><span class="line">*/</span><br><span class="line">const path = require('path');</span><br><span class="line">const webpack = require('webpack');</span><br><span class="line"><span class="deletion">- const merge = require('webpack-merge'); </span></span><br><span class="line"><span class="deletion">- const commonConfig = require('./webpack.common.js');</span></span><br><span class="line"></span><br><span class="line">// 开发环境的配置</span><br><span class="line"> const devConfig = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, 'dist'),</span><br><span class="line">        clientLogLevel: 'info',</span><br><span class="line">        open: true,</span><br><span class="line">        host: 'localhost',</span><br><span class="line">        port: '9090',</span><br><span class="line">        inline: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            '/': &#123;</span><br><span class="line">                target: 'http://yagmblog.com/',</span><br><span class="line">            &#125;,</span><br><span class="line">            '/upload': &#123;</span><br><span class="line">                target: 'http://yagmblog.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        hot: true,</span><br><span class="line">        hotOnly: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    "style-loader",</span><br><span class="line">                    "css-loader",</span><br><span class="line">                    'postcss-loader',</span><br><span class="line">                ],</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss$/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: 'css-loader',</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            importLoaders: 2,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    'sass-loader',</span><br><span class="line">                    'postcss-loader',</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    ],</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        chunkFilename: '[name].chunk.js',</span><br><span class="line">    &#125;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="deletion">- module.exports = merge(commonConfig, devConfig)  // 原来是在不同环境配置文件中导入公共的配置，在不同环境合并导出</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ module.exports =  devConfig;  // 现在将不同环境的配置导入到公共配置中，根据打包命令传过来的环境参数进行不同的合并导出</span></span><br></pre></td></tr></table></figure><p><strong>修改webpack.prod.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生产环境配置</span><br><span class="line">**/</span><br><span class="line"><span class="deletion">- const merge = require('webpack-merge');</span></span><br><span class="line"><span class="deletion">- const commonConfig = require('./webpack.common.js');</span></span><br><span class="line"></span><br><span class="line">// MiniCssExtractPlugin 代码分割插件，不支持热更新，在开发环境中使用影响开发效率，建议在生产环境中用</span><br><span class="line">// css 和 sass loader 使用 MiniCssExtractPlugin.loader </span><br><span class="line">const MiniCssExtractPlugin = require('mini-css-extract-plugin');</span><br><span class="line">// optimize-css-assets-webpack-plugin    css压缩插件</span><br><span class="line">const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const prodConfig = &#123;</span><br><span class="line">    mode: 'production',</span><br><span class="line">    devtool: 'cheap-module-souce-map',</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    "css-loader",</span><br><span class="line">                    'postcss-loader',</span><br><span class="line">                ],</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss$/,</span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: 'css-loader',</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            importLoaders: 2,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    'sass-loader',</span><br><span class="line">                    'postcss-loader',</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            new OptimizeCssAssetsPlugin(&#123;&#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: '[name].css',</span><br><span class="line">            chunkFilename: '[name].chunk.css'</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: '[name].[contenthash].js',</span><br><span class="line">        chunkFilename: '[name].[contenthash].js'</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- module.exports = merge(commonConfig, prodConfig)  // 原来是在不同环境配置文件中导入公共的配置，在不同环境合并导出</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ module.exports =  prodConfig;</span></span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development  --colors",</span><br><span class="line"><span class="addition">+    "dev-build": "webpack --colors --config ./build/webpack.common.js --env=development",  // 执行打包的入口文件则统一为`webpack.common.js`，下面同</span></span><br><span class="line"><span class="addition">+    "start": "webpack-dev-server --colors --config ./build/webpack.common.js",</span></span><br><span class="line"><span class="addition">+    "build": "webpack --colors --config ./build/webpack.common.js --env=production"   //这块原来是生产环境的打包命令。现在加上`env`参数，方便在webpack.common.js文件中区分执行哪个配置</span></span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>在<code>webpack.common.js</code>的同级目录，新建<code>webpack.config.js</code>文件</strong><br>webpack.config.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ /**</span></span><br><span class="line"><span class="addition">+  * process为node变量, argv为打包命令后面的所有参数，以数组形式排列。这里取env设置全局变量</span></span><br><span class="line"><span class="addition">+  */</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ let regStr = /--env=/</span></span><br><span class="line"><span class="addition">+ let argv = process.argv;</span></span><br><span class="line"><span class="addition">+ let env = '';</span></span><br><span class="line"><span class="addition">+ argv.forEach(val =&gt; &#123;</span></span><br><span class="line"><span class="addition">+     if(regStr.test(val))&#123;</span></span><br><span class="line"><span class="addition">+         env = val.replace(/--env=(.+)/g,"$1");</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+ &#125;)</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ let config = &#123;   // 新建config变量，并将打包命令的env参数赋值给config。 tip: 此时的config依然在项目源码中无法使用</span></span><br><span class="line"><span class="addition">+     NODE_ENV: env</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ module.exports = config</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 公共的配置文件</span><br><span class="line">**/</span><br><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const webpack = require('webpack');</span><br><span class="line"><span class="addition">+ const config = require('./webpack.config.js');     // 引入config</span></span><br><span class="line"><span class="addition">+ const merge = require('webpack-merge');</span></span><br><span class="line"><span class="addition">+ const devConfig = require('./webpack.dev.js');</span></span><br><span class="line"><span class="addition">+ const prodConfig = require('./webpack.prod.js');</span></span><br><span class="line"></span><br><span class="line">const commonConfig = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.js$/, </span><br><span class="line">            exclude: /(node_modules|bower_components|lib)/,</span><br><span class="line">            loader: 'babel-loader'</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new webpack.ProvidePlugin(&#123;</span><br><span class="line">            $: 'jquery',</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="addition">+        new webpack.DefinePlugin(&#123;    // 创建 peocess.env 全局常量，将webpack.config.js中的取到的环境变量赋值给peocess.env </span></span><br><span class="line"><span class="addition">+            'process_env': JSON.stringify(config)</span></span><br><span class="line"><span class="addition">+        &#125;)</span></span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        runtimeChunk: &#123;</span><br><span class="line">            name: 'runtime',</span><br><span class="line">        &#125;,</span><br><span class="line">        usedExports: true,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: 'all',</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    test: /[\\/]node_modules[\\/]/,</span><br><span class="line">                    priority: -10,</span><br><span class="line">                    name: 'vendors',</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    performance: false,</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '../',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        chunkFilename: '[name].chunk.js',</span><br><span class="line">        path: path.resolve(__dirname, '../dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- module.exports = commonConfig</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ module.exports = env =&gt; &#123;    // 这里的`env`则是`package.json`中的打包命令设置的env参数。这里可以通过函数参数的形式接收。</span></span><br><span class="line"><span class="addition">+     if(env &amp;&amp; env.production)&#123;  // 如果`env.production`存在。则使用生产环境配置文件。否则，使用开发环境配置文件</span></span><br><span class="line"><span class="addition">+         return  merge(commonConfig, prodConfig) </span></span><br><span class="line"><span class="addition">+     &#125;else &#123;</span></span><br><span class="line"><span class="addition">+         return  merge(commonConfig, devConfig)</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import _ from 'lodash';</span><br><span class="line">import $ from 'jquery'</span><br><span class="line"></span><br><span class="line"><span class="addition">+ let host;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ if(process_env.NODE_ENV == 'development')&#123;  // 配置开发环境接口域名</span></span><br><span class="line"><span class="addition">+     host = 'http://test.api.com';  </span></span><br><span class="line"><span class="addition">+     </span></span><br><span class="line"><span class="addition">+ &#125;else if(process_env.NODE_ENV == 'production')&#123;  // 配置生产环境接口域名</span></span><br><span class="line"><span class="addition">+     host = 'http://prod.api.com';</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ console.log('--------');</span></span><br><span class="line"><span class="addition">+ console.log(host);    // 控制台打印设置的环境变量</span></span><br><span class="line"><span class="addition">+ console.log('--------');</span></span><br><span class="line"></span><br><span class="line">const dom = $('&lt;div&gt;');</span><br><span class="line">dom.html(_.join(['蔓', '羊'], '-----'));</span><br><span class="line">$('body').append(dom);</span><br></pre></td></tr></table></figure><p><strong>修改完成，运行生产环境打包命令： <code>npm run build</code></strong><br><img src="/images/webpack/40.png" alt="Alt"><br>上面可以看到，控制台已经成功地打印出了 <code>http://prod.api.com</code>。</p><p><strong>再重新运行开发环境打包命令： <code>npm run dev-build</code></strong><br><img src="/images/webpack/41.png" alt="Alt"><br>上面可以看到，控制台已经成功地打印出了 <code>http://test.api.com</code>。现在就成功实现项目源码中不同环境做不同的操作</p><h3 id="3-cross-env-运行跨平台设置和使用环境变量的脚本"><a class="header-anchor" href="#3-cross-env-运行跨平台设置和使用环境变量的脚本">¶</a>3. cross-env 运行跨平台设置和使用环境变量的脚本</h3><blockquote><p><code>cross-env</code>是用来解决<code>windows</code>和<code>Unix</code>不同命令设置环境变量的问题。<code>cross-env</code>可以方便我们使用单一的命令来设置环境变量。让我们能够以unix方式设置环境变量，然后在windows上也能兼容运行。</p></blockquote><p><strong>安装 cross-env</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cross-env</span><br></pre></td></tr></table></figure><p><strong>修改 package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development  --colors",</span><br><span class="line"><span class="addition">+    "dev-build": "cross-env NODE_ENV=test webpack --colors --config ./build/webpack.common.js",</span></span><br><span class="line">    "start": "webpack-dev-server --colors --config ./build/webpack.common.js",</span><br><span class="line"><span class="addition">+    "build": "cross-env NODE_ENV=prod webpack --colors --config ./build/webpack.common.js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * process为node变量, argv为打包命令后面的所有参数，以数组形式排列。这里取env设置全局变量</span><br><span class="line"> */</span><br><span class="line">let regStr = /--env=/</span><br><span class="line">let argv = process.argv;</span><br><span class="line">let env = '';</span><br><span class="line"></span><br><span class="line">argv.forEach(val =&gt; &#123;</span><br><span class="line">    if(regStr.test(val))&#123;</span><br><span class="line">        env = val.replace(/--env=(.+)/g,"$1");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let config = &#123;</span><br><span class="line">    NODE_ENV: env,</span><br><span class="line"><span class="addition">+    ENV: process.env.NODE_ENV,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure><p><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new webpack.ProvidePlugin(&#123;</span><br><span class="line">            $: 'jquery',</span><br><span class="line">        &#125;),</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            'process_env': JSON.stringify(config),</span><br><span class="line"><span class="addition">+            'process.env': JSON.stringify(config.ENV)</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">module.exports = env =&gt; &#123;</span><br><span class="line"><span class="addition">+   if(process.env.NODE_ENV == 'prod')&#123;</span></span><br><span class="line">        return  merge(commonConfig, prodConfig)</span><br><span class="line">    </span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return  merge(commonConfig, devConfig)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import _ from 'lodash';</span><br><span class="line">import $ from 'jquery'</span><br><span class="line">let host;</span><br><span class="line"></span><br><span class="line">if(process_env.NODE_ENV == 'development')&#123;  // 配置开发环境接口域名</span><br><span class="line">    host = 'http://test.api.com';  </span><br><span class="line">    </span><br><span class="line">&#125;else if(process_env.NODE_ENV == 'production')&#123;  // 配置生产环境接口域名</span><br><span class="line">    host = 'http://prod.api.com';</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  console.log('--------');</span></span><br><span class="line"><span class="addition">+  console.log(process.env);   // 源码中控制台打印环境变量</span></span><br><span class="line"><span class="addition">+  console.log('--------');</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const dom = $('&lt;div&gt;');</span><br><span class="line">dom.html(_.join(['蔓', '羊'], '-----'));</span><br><span class="line">$('body').append(dom);</span><br></pre></td></tr></table></figure><p><strong>运行 <code>npm run build</code> 生产环境打包命令，打包完成浏览器打开控制台</strong><br><img src="/images/webpack/42.png" alt="Alt"><br>可以看到环境变量<code>prod</code>已经在控制台打印出来了。但在具体项目中，我们还是会使用不同环境调用不同的配置文件打包。所以了解了如何配置环境变量，最后代码回滚到这篇文章最开始状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在之前的章节中，我们学到了有关于在配置环境中，如何区分开发环境与生产环境。但在源代码中还是不能区分开发环境与生产环境。事实上，我们经常会碰到开发环境中使用这个域名： &lt;code&gt;http://test.api.com&lt;/code&gt;。正式环境中使用另一个域名：&lt;code&gt;ht
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-shimming-15</title>
    <link href="http://yoursite.com/2019/08/07/webpack-shimming-15/"/>
    <id>http://yoursite.com/2019/08/07/webpack-shimming-15/</id>
    <published>2019-08-07T03:24:53.000Z</published>
    <updated>2019-08-09T10:27:28.229Z</updated>
    
    <content type="html"><![CDATA[<p><code>shimming</code>翻译过来就是<code>垫片</code>。我们之前的代码项目中，会在<code>main.js</code>中引入很多类似于下面的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'loadsh'</span></span><br><span class="line"><span class="keyword">import</span> &#123;http&#125; <span class="keyword">from</span> <span class="string">'util/http'</span></span><br></pre></td></tr></table></figure><p>并且每个库只在当前引入的js文件中生效。如果我们同时在多个js文件中使用，那么需要在每个js文件中去<code>import</code>。所<code>webpack</code>提供了一个<code>ProvidePlugin</code>插件来帮我们第三方模块的全局引入。</p><blockquote></blockquote><h3 id="安装-webpack-provideplugin-文档"><a class="header-anchor" href="#安装-webpack-provideplugin-文档">¶</a>安装 <code>webpack</code> <a href="https://webpack.docschina.org/plugins/provide-plugin/" target="_blank" rel="noopener">ProvidePlugin 文档 </a>.</h3><p>之前安装过就不需要安装了。没有安装的， 用下面的命令进行安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><p> <br><strong>先来看下目录结构</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">|- build</span><br><span class="line">    |- webpack.common.js</span><br><span class="line">    |- webpack.dev.js</span><br><span class="line">    |- webpack.prod.js</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line"><span class="addition">+    |- test.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p> <br><strong>test.js 写一个方法并导出，实现给body添加背景色</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ export function ui()&#123;</span></span><br><span class="line"><span class="addition">+     $('body').css('background', 'pink');</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p> <br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import _ from 'lodash';</span></span><br><span class="line"><span class="addition">+ import $ from 'jquery'      </span></span><br><span class="line"><span class="addition">+ import &#123; ui &#125; from './test.js'   // 引入test.js文件</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ ui();     // 执行ui方法</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ const dom = $('&lt;div&gt;');</span></span><br><span class="line"><span class="addition">+ dom.html(_.join(['dell', 'lee'], '-----'));</span></span><br><span class="line"><span class="addition">+ $('body').append(dom);</span></span><br></pre></td></tr></table></figure><p> <br><strong>现在运行 <code>npm run start</code></strong><br><img src="/images/webpack/37.png" alt="Alt"><br><img src="/images/webpack/38.png" alt="Alt"><br>可以看到报<code>$</code>找不到。并且我们之前也安装过<code>jquery</code>。为什么会报错呢？我们把<code>index.js</code>中的<code>ui.js</code>注释掉，在刷新页面，就会看到<code>index.js</code>中使用<code>$</code>创建的dom已经在页面上显示出来了。说明<code>$</code>是可以用的。也就是说，是<code>test.js</code>中的<code>$</code>找不到。<code>index.js</code>中明明引入了，为什么会找不到呢？</p><blockquote><p>这里需要解释下，我们一般在文件中引入的第三方库，它的this指向的则是当前的库，即只能在当前文件中使用。这也就是为什么在<code>test.js</code>中找不到<code>$</code>的原因了。那么我们想要引入一次，在项目的所有的文件都可以用，怎么做呢？ <code>webpack</code>的插件<code>ProvidePlugin</code>就是为我们解决这个问题的。</p></blockquote><p> <br><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'mywebpack',</span><br><span class="line">        // filename: 'bundle.html',</span><br><span class="line">        template: './index.html',</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line"><span class="addition">+    new webpack.ProvidePlugin(&#123;     //  设置全局的变量</span></span><br><span class="line"><span class="addition">+        $: 'jquery',                //  在文件中遇到`$`则替换成`jquery`来执行事件</span></span><br><span class="line"><span class="addition">+    &#125;)</span></span><br><span class="line"></span><br><span class="line">],</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p> <br><strong>断开刚才的启动的命令，重新运行 <code>npm run start</code>。当配置文件有改动时，需要重新启动一个服务</strong><br><img src="/images/webpack/39.png" alt="Alt"><br>现在可以看到<code>index.js</code>中的<code>dom</code>已经挂载到页面上了。<code>test.js</code>中设置<code>body</code>设置背景色也已经设置成功了。</p><blockquote><p>这就是<code>ProvidePlugin</code>的作用。这种不仅适用于网上流行的第三方库，我们自己写的公共文件也可以用这种方式设置，在全局使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;shimming&lt;/code&gt;翻译过来就是&lt;code&gt;垫片&lt;/code&gt;。我们之前的代码项目中，会在&lt;code&gt;main.js&lt;/code&gt;中引入很多类似于下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack浏览器缓存-14</title>
    <link href="http://yoursite.com/2019/08/06/webpack%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98-14/"/>
    <id>http://yoursite.com/2019/08/06/webpack浏览器缓存-14/</id>
    <published>2019-08-06T07:56:42.000Z</published>
    <updated>2019-08-06T10:23:12.627Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在项目中通常会引入非常多的插件库。我们在修改业务逻辑时，需要重新打包。这样我们每更新一次。用户在使用都需要全部加载所有的资源。事实上。我们引入的第三方的插件库，是不希望用户每次使用都进行加载的。那么<code>webpack</code>中就为我们解决了这个问题。</p></blockquote><h3 id="处理缓存配置"><a class="header-anchor" href="#处理缓存配置">¶</a>处理缓存配置</h3><p><strong>index.js</strong><br>没有安装的我们先进行安装下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash -D</span><br><span class="line">npm install i jquery</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import _ from 'lodash';</span></span><br><span class="line"><span class="addition">+ import $ from 'jquery'</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ const dom = $('&lt;div&gt;');</span></span><br><span class="line"><span class="addition">+ dom.html(_.join(['dell', 'lee'], '-----'));</span></span><br><span class="line"><span class="addition">+ $('body').append(dom);</span></span><br></pre></td></tr></table></figure><p> <br><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">        usedExports: true,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: 'all',</span><br><span class="line"><span class="addition">+            cacheGroups: &#123;      // 添加库文件的打包配置</span></span><br><span class="line"><span class="addition">+                vendors: &#123;      </span></span><br><span class="line"><span class="addition">+                    test: /[\\/]node_modules[\\/]/,   // 匹配库文件</span></span><br><span class="line"><span class="addition">+                    priority: -10,                   // 优先级</span></span><br><span class="line"><span class="addition">+                    name: 'vendors',                 // 名字默认为 vendors~main.chunk.js。 这里配置为 vendors.chunk.js</span></span><br><span class="line"><span class="addition">+                &#125;</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line"><span class="deletion">-        filename: '[name].js',</span></span><br><span class="line"><span class="deletion">-        chunkFilename: '[name].chunk.js',  </span></span><br><span class="line">        path: path.resolve(__dirname, '../dist')</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <br><strong>webpack.dev.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    // new webpack.DefinePlugin(&#123;</span><br><span class="line">    //     'process.env.NODE_ENV': JSON.stringify('development')</span><br><span class="line">    // &#125;)</span><br><span class="line">],</span><br><span class="line"><span class="addition">+ output:&#123;     // 开发环境的输出配置</span></span><br><span class="line"><span class="addition">+     filename: '[name].js',    // 输出文件名的配置</span></span><br><span class="line"><span class="addition">+     chunkFilename: '[name].chunk.js',    // 输出的库文件的文件打包名配置</span></span><br><span class="line"><span class="addition">+ &#125;,</span></span><br></pre></td></tr></table></figure><p> <br><strong>webpack.prod.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename: '[name].css',</span><br><span class="line">        chunkFilename: '[name].chunk.css'</span><br><span class="line">    &#125;),</span><br><span class="line">],</span><br><span class="line"><span class="addition">+ output: &#123;   // 生产环境的输出配置</span></span><br><span class="line"><span class="addition">+     filename: '[name].[contenthash].js',    // 输出文件名的配置</span></span><br><span class="line"><span class="addition">+     chunkFilename: '[name].[contenthash].js',    // 输出的库文件的文件名打包配置</span></span><br><span class="line"><span class="addition">+ &#125;,</span></span><br></pre></td></tr></table></figure><p><strong>生产环境打包 <code>npm run build</code></strong><br><img src="/images/webpack/34.png" alt="Alt"><br>现在我们看到已经打包好了带有<code>contenthash</code>的文件。<code>main</code>开头的是我们的自己写的业务逻辑。vendors的文件就是我们的库文件了。后续打包库文件正常名字是不会变的。当业务逻辑改变时，只有main开头的打包文件<code>hash</code>会变。很好的帮我们处理了文件缓存的问题。</p><blockquote><p>库文件后续打包名字及<code>hash</code>值不会变，这个暂时只有webpack新版本会支持(我用的是<code>webpack v4.32.2 。4.0以上的版本应该都是可以的</code>)。在低版本中不会生效。低版本<code>webpack</code>打包的逻辑是，当业务逻辑文件和库文件之间是有联系的。所以当业务逻辑改变时，重新打包生成的库文件<code>hash</code>值也会变。所以每次项目更新都会连库文件一起更新。<code>webpack</code>提供了一个配置项，把库文件业务逻辑之间的关系抽离出成为一个单独的文件。这样就可以解决库文件每次都要重新加载的问题。下面我们看下配置：</p></blockquote><h3 id="抽离映射关系文件"><a class="header-anchor" href="#抽离映射关系文件">¶</a>抽离映射关系文件</h3><p> <br><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">optimization: &#123;</span><br><span class="line"><span class="addition">+        runtimeChunk: &#123;     // webpack打包会有一个mainfest映射关系文件。 runtimeChunk文件则是将映射关系文件抽离出来。</span></span><br><span class="line"><span class="addition">+            name: 'runtime',</span></span><br><span class="line"><span class="addition">+        &#125;,</span></span><br><span class="line">        usedExports: true,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: 'all',</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    test: /[\\/]node_modules[\\/]/,</span><br><span class="line">                    priority: -10,</span><br><span class="line">                    name: 'vendors',</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p> <br>这样配合后， 重新打包 <code>npm run build</code><br><img src="/images/webpack/35.png" alt="Alt"> 可以看大多出了一个<code>runtime.js</code>文件</p><p> <br>现在我们更改下<code>index.js</code>文件。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import _ from 'lodash';</span><br><span class="line">import $ from 'jquery'</span><br><span class="line"></span><br><span class="line">const dom = $('&lt;div&gt;');</span><br><span class="line"><span class="addition">+ dom.html(_.join(['dell', 'lee'], '++'));   // 将连接符改成 ++</span></span><br><span class="line">$('body').append(dom);</span><br></pre></td></tr></table></figure><p> <br>这样配合后， 重新打包 <code>npm run build</code><br><img src="/images/webpack/36.png" alt="Alt"> 对比上面打包截图，可以看到<code>runtime.js</code> <code>vendors.js</code>文件的<code>hash</code>值都没变。只有<code>main.js</code>的<code>hash</code>值变了。<br>这样用户在加载页面时，就可以只加载<code>main.js</code>文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们在项目中通常会引入非常多的插件库。我们在修改业务逻辑时，需要重新打包。这样我们每更新一次。用户在使用都需要全部加载所有的资源。事实上。我们引入的第三方的插件库，是不希望用户每次使用都进行加载的。那么&lt;code&gt;webpack&lt;/code&gt;中就为
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-css文件的代码分割-13</title>
    <link href="http://yoursite.com/2019/07/17/webpack-css%E6%96%87%E4%BB%B6%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2-13/"/>
    <id>http://yoursite.com/2019/07/17/webpack-css文件的代码分割-13/</id>
    <published>2019-07-17T08:46:14.000Z</published>
    <updated>2019-08-06T03:21:56.443Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中，当css文件非常大的时候，一般会把css文件提取出来。（ps：默认是打包在js中的）；那么webpack怎么提取css呢，请往下看。</p><ul><li>mini-css-extract-plugin      // css提取</li><li>optimize-css-assets-webpack-plugin   // css压缩</li></ul><h3 id="安装-mini-css-extract-plugin"><a class="header-anchor" href="#安装-mini-css-extract-plugin">¶</a>安装 <code>mini-css-extract-plugin</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>此插件是将原来打包在js文件中的css提取出来成为一个单独的css文件。目前不支持热重载（HMR）.在开发环境中使用会降低开发效率，建议在生产环境中使用。</p><p><strong>webpack.dev.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 开发环境配置</span><br><span class="line"> * </span><br><span class="line">*/</span><br><span class="line">const path = require('path');</span><br><span class="line">const webpack = require('webpack');</span><br><span class="line">const merge = require('webpack-merge'); </span><br><span class="line">const commonConfig = require('./webpack.common.js');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 开发环境的配置</span><br><span class="line"> const devConfig = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, 'dist'),</span><br><span class="line">        clientLogLevel: 'info',</span><br><span class="line">        open: true,</span><br><span class="line">        host: 'localhost',</span><br><span class="line">        port: '9090',</span><br><span class="line">        inline: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            '/': &#123;</span><br><span class="line">                target: 'http://yagmblog.com/',</span><br><span class="line">            &#125;,</span><br><span class="line">            '/upload': &#123;</span><br><span class="line">                target: 'http://yagmblog.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        hot: true,</span><br><span class="line">        hotOnly: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line"><span class="addition">+        rules: [</span></span><br><span class="line"><span class="addition">+            &#123;</span></span><br><span class="line"><span class="addition">+                test: /\.css$/,</span></span><br><span class="line"><span class="addition">+                use: [</span></span><br><span class="line"><span class="addition">+                    "style-loader",</span></span><br><span class="line"><span class="addition">+                    "css-loader",</span></span><br><span class="line"><span class="addition">+                    'postcss-loader',</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+            &#125;,&#123;</span></span><br><span class="line"><span class="addition">+                test: /\.scss$/,</span></span><br><span class="line"><span class="addition">+                use: [</span></span><br><span class="line"><span class="addition">+                    'style-loader',</span></span><br><span class="line"><span class="addition">+                    &#123;</span></span><br><span class="line"><span class="addition">+                        loader: 'css-loader',</span></span><br><span class="line"><span class="addition">+                        options: &#123;</span></span><br><span class="line"><span class="addition">+                            importLoaders: 2,</span></span><br><span class="line"><span class="addition">+                        &#125;</span></span><br><span class="line"><span class="addition">+                    &#125;,</span></span><br><span class="line"><span class="addition">+                    'sass-loader',</span></span><br><span class="line"><span class="addition">+                    'postcss-loader',</span></span><br><span class="line"><span class="addition">+                ]</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+        ]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        // new webpack.DefinePlugin(&#123;</span><br><span class="line">        //     'process.env.NODE_ENV': JSON.stringify('development')</span><br><span class="line">        // &#125;)</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  合并导出 基础公共配置以及开发环境的配置</span><br><span class="line"> **/</span><br><span class="line">module.exports = merge(commonConfig, devConfig);</span><br></pre></td></tr></table></figure><p> <br><strong>webpack.prod.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生产环境配置</span><br><span class="line">**/</span><br><span class="line">const merge = require('webpack-merge');</span><br><span class="line">const commonConfig = require('./webpack.common.js');</span><br><span class="line"></span><br><span class="line"><span class="addition">+ // MiniCssExtractPlugin 代码分割插件，不支持热更新，在开发环境中使用影响开发效率，建议在生产环境中用</span></span><br><span class="line"><span class="addition">+ // css 和 sass loader 使用 MiniCssExtractPlugin.loader </span></span><br><span class="line"><span class="addition">+ const MiniCssExtractPlugin = require('mini-css-extract-plugin');</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const prodConfig = &#123;</span><br><span class="line">    mode: 'production',</span><br><span class="line">    devtool: 'cheap-module-souce-map',</span><br><span class="line">    module: &#123;</span><br><span class="line"><span class="addition">+        rules: [</span></span><br><span class="line"><span class="addition">+            &#123;</span></span><br><span class="line"><span class="addition">+                test: /\.css$/,</span></span><br><span class="line"><span class="addition">+                use: [</span></span><br><span class="line"><span class="addition">+                    MiniCssExtractPlugin.loader,     // 将原来的style-loader换成代码分割里面的loader</span></span><br><span class="line"><span class="addition">+                    "css-loader",</span></span><br><span class="line"><span class="addition">+                    'postcss-loader',</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+            &#125;,&#123;</span></span><br><span class="line"><span class="addition">+                test: /\.scss$/,</span></span><br><span class="line"><span class="addition">+                use: [</span></span><br><span class="line"><span class="addition">+                    MiniCssExtractPlugin.loader,      // 将原来的style-loader换成代码分割里面的loader</span></span><br><span class="line"><span class="addition">+                    &#123;</span></span><br><span class="line"><span class="addition">+                        loader: 'css-loader',</span></span><br><span class="line"><span class="addition">+                        options: &#123;</span></span><br><span class="line"><span class="addition">+                            importLoaders: 2,</span></span><br><span class="line"><span class="addition">+                        &#125;</span></span><br><span class="line"><span class="addition">+                    &#125;,</span></span><br><span class="line"><span class="addition">+                    'sass-loader',</span></span><br><span class="line"><span class="addition">+                    'postcss-loader',</span></span><br><span class="line"><span class="addition">+                ]</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+        ],</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line"><span class="addition">+        new MiniCssExtractPlugin(&#123;</span></span><br><span class="line"><span class="addition">+            filename: '[name].css',      // 配置打包文件名。生成的css文件直接在页面中引用，则会走`filename`的配置项</span></span><br><span class="line"><span class="addition">+            chunkFilename: '[name].chunk.css'    </span></span><br><span class="line"><span class="addition">+        &#125;),</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  合并导出 生产环境的配置</span><br><span class="line"> **/</span><br><span class="line">module.exports = merge(commonConfig, prodConfig);</span><br></pre></td></tr></table></figure><p> <br><strong>weback.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 公共的配置文件</span><br><span class="line">**/</span><br><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line"><span class="deletion">-        rules: [</span></span><br><span class="line"><span class="deletion">-        &#123;</span></span><br><span class="line"><span class="deletion">-            test: /\.css$/,</span></span><br><span class="line"><span class="deletion">-            use: [</span></span><br><span class="line"><span class="deletion">-                "style-loader",</span></span><br><span class="line"><span class="deletion">-                "css-loader",</span></span><br><span class="line"><span class="deletion">-                'postcss-loader',</span></span><br><span class="line"><span class="deletion">-            ],</span></span><br><span class="line"><span class="deletion">-        &#125;,&#123;</span></span><br><span class="line"><span class="deletion">-            test: /\.scss$/,</span></span><br><span class="line"><span class="deletion">-            use: [</span></span><br><span class="line"><span class="deletion">-                'style-loader',</span></span><br><span class="line"><span class="deletion">-                &#123;</span></span><br><span class="line"><span class="deletion">-                    loader: 'css-loader',</span></span><br><span class="line"><span class="deletion">-                    options: &#123;</span></span><br><span class="line"><span class="deletion">-                        importLoaders: 2,</span></span><br><span class="line"><span class="deletion">-                    &#125;</span></span><br><span class="line"><span class="deletion">-                &#125;,</span></span><br><span class="line"><span class="deletion">-                'sass-loader',</span></span><br><span class="line"><span class="deletion">-                'postcss-loader',</span></span><br><span class="line"><span class="deletion">-            ]</span></span><br><span class="line"><span class="deletion">-        &#125;,&#123;</span></span><br><span class="line">            test: /\.js$/, </span><br><span class="line">            exclude: /(node_modules|bower_components|lib)/,</span><br><span class="line">            loader: 'babel-loader'</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        usedExports: true,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: 'all',</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '../',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        chunkFilename: '[name].chunk.js',</span><br><span class="line">        path: path.resolve(__dirname, '../dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上原来css，sass文件打包配置都在公共的webpack.common.js文件中。现在分别写在webpack.dev.js和webpack.prod.js文件中来。</p><p><strong>新建 assets/css/index.css 文件</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ body &#123;</span></span><br><span class="line"><span class="addition">+     background: #eee;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ div &#123;</span></span><br><span class="line"><span class="addition">+     color: green;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p> </p><p><strong>在index.js文件中引入index.css</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import './assets/css/index.css'</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ console.log('hello world!');</span></span><br></pre></td></tr></table></figure><p>现在执行前面配置的生产环境的打包 <code>npm run build</code><br><img src="/images/webpack/30.png" alt="Alt"> <img src="/images/webpack/31.png" alt="Alt">   <img src="/images/webpack/32.png" alt="Alt"><br>从上面可以看到，我们打包的样式已经生效，并且打包出单独的css文件。</p><h3 id="安装-optimize-css-assets-webpack-plugin-进行css文件压缩"><a class="header-anchor" href="#安装-optimize-css-assets-webpack-plugin-进行css文件压缩">¶</a>安装 <code>optimize-css-assets-webpack-plugin</code>，进行css文件压缩</h3><blockquote><p>optimize-css-assets-webpack-plugin 是css压缩插件。</p></blockquote><p><strong>安装  optimize-css-assets-webpack-plugin</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure><p> <br><strong>webpack.prod.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生产环境配置</span><br><span class="line">**/</span><br><span class="line">const merge = require('webpack-merge');</span><br><span class="line">const commonConfig = require('./webpack.common.js');</span><br><span class="line"></span><br><span class="line">// MiniCssExtractPlugin 代码分割插件，不支持热更新，在开发环境中使用影响开发效率，建议在生产环境中用</span><br><span class="line">// css 和 sass loader 使用 MiniCssExtractPlugin.loader </span><br><span class="line">const MiniCssExtractPlugin = require('mini-css-extract-plugin');</span><br><span class="line"><span class="addition">+ // optimize-css-assets-webpack-plugin    css压缩插件</span></span><br><span class="line"><span class="addition">+ const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">const prodConfig = &#123;</span><br><span class="line">    mode: 'production',</span><br><span class="line">    devtool: 'cheap-module-souce-map',</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    "css-loader",</span><br><span class="line">                    'postcss-loader',</span><br><span class="line">                ],</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss$/,</span><br><span class="line">                use: [</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: 'css-loader',</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            importLoaders: 2,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    'sass-loader',</span><br><span class="line">                    'postcss-loader',</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    optimization: &#123;      // 优化配置项</span></span><br><span class="line"><span class="addition">+        minimizer: [</span></span><br><span class="line"><span class="addition">+            new OptimizeCssAssetsPlugin(&#123;&#125;)      // 使用压缩css插件</span></span><br><span class="line"><span class="addition">+        ]</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    plugins: [</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: '[name].css',</span><br><span class="line">            chunkFilename: '[name].chunk.css'</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  合并导出 生产环境的配置</span><br><span class="line"> **/</span><br><span class="line">module.exports = merge(commonConfig, prodConfig);</span><br></pre></td></tr></table></figure><p><strong>重新打包生产环境的包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/33.png" alt="Alt"><br>现在可以看到打包生成的css文件已经被压缩到了一行。说明配置生效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发中，当css文件非常大的时候，一般会把css文件提取出来。（ps：默认是打包在js中的）；那么webpack怎么提取css呢，请往下看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mini-css-extract-plugin      // css提取&lt;/li&gt;
&lt;li&gt;optim
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-Preloading,Prefetching-12</title>
    <link href="http://yoursite.com/2019/07/16/webpack-Preloading-Prefetching-12/"/>
    <id>http://yoursite.com/2019/07/16/webpack-Preloading-Prefetching-12/</id>
    <published>2019-07-16T08:48:14.000Z</published>
    <updated>2019-07-17T08:39:56.250Z</updated>
    
    <content type="html"><![CDATA[<!-- 官方推荐分析打包项目网站： www.github.com/webpack/analyse --><p>前两章写了代码分割，目的在于优化加载速度。但是，是依靠缓存来优化第二次页面打开的速度。那这篇文章我们就看下怎么可以让页面第一次就可以快速打开。</p><blockquote><p><code>Preloading</code>,<code>Prefetching</code> <a href="https://webpack.docschina.org/guides/code-splitting/#%E9%A2%84%E5%8F%96-%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97-prefetch-preload-module-" target="_blank" rel="noopener"><font color="#42A8E1">预加载官方文档</font></a>.</p></blockquote><h3 id="1-先来看下一般的代码分析"><a class="header-anchor" href="#1-先来看下一般的代码分析">¶</a>1. 先来看下一般的代码分析</h3><p><strong>webpack.config.js 文件进行修改。去掉之前的配置</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line"> optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line"><span class="addition">+            chunks: 'async',</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p> <br><strong>index.js是上篇的内容不变</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+document.addEventListener('click', () =&gt; &#123;</span></span><br><span class="line"><span class="addition">+    const element = document.createElement('div');</span></span><br><span class="line"><span class="addition">+    element.innerHTML = "hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello +worldhello worldhello worldhello worldhello worldhello world";</span></span><br><span class="line"><span class="addition">+    document.body.appendChild(element);</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br></pre></td></tr></table></figure><p>现在我们打包运行<code>npm run dev-build</code>，浏览器打开页面。打开控制台。按组合键 <code>ctrl + shift + p</code> ,输入 <code>cov</code>, 或者在切换窗口视图选择，<img src="/images/webpack/25.png" alt="Alt"> <img src="/images/webpack/24.png" alt="Alt"></p><p> <br>打开如下视图<img src="/images/webpack/26.png" alt="Alt">，可以看到index.js的未利用率有77.7%事实上还是有很大的优化空间的。</p><h3 id="2-代码优化"><a class="header-anchor" href="#2-代码优化">¶</a>2. 代码优化</h3><p><strong>先来看下目录</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line"><span class="deletion">-    |- lodash.js</span></span><br><span class="line"><span class="addition">+    |- click.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line">|- webpack.dev.js</span><br><span class="line">|- webpack.prod.js</span><br><span class="line">|- webpack.common.js</span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p> <br><strong>click.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ function getComponent()&#123;</span></span><br><span class="line"><span class="addition">+     const element = document.createElement('div');</span></span><br><span class="line"><span class="addition">+     element.innerHTML = "hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello + worldhello worldhello worldhello worldhello worldhello world";</span></span><br><span class="line"><span class="addition">+     document.body.appendChild(element);</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line">export default getComponent;</span><br></pre></td></tr></table></figure><p> <br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ document.addEventListener('click', function()&#123;</span></span><br><span class="line"><span class="addition">+     import('./click.js').then((&#123;default: _&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+         _();</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line"><span class="addition">+ &#125;)</span></span><br></pre></td></tr></table></figure><p>现在我们使用懒加载的方式，加载click.js(即在点击页面的时候再去加载click.js)。现在可以看到代码的未使用率下降到了72.2%。这种懒加载的方法看起来确实优化了不少。我们想下。这种即用即加载的方式，如果临时加载的文件比较大。是不是会导致我们的操作看起来反应时间比较久？这就是懒加载带来的弊端。所以<code>prefeting</code> 和 <code>preloading</code> 可以帮我们解决这个由于优化带来的问题。<br><img src="/images/webpack/27.png" alt="Alt"></p><h3 id="2-prefetching-和-preloading-加载"><a class="header-anchor" href="#2-prefetching-和-preloading-加载">¶</a>2. Prefetching 和 Preloading 加载</h3><p>上面的方式能看到控制台<code>network</code>模块，再刷新浏览器，只会加载<code>index.html</code>,<code>main.js</code>文件。当我们在点击页面的时候才会加载0.js(0.js是webpack帮我们把<code>click.js</code>打包后的文件)。现在我们修改下代码，看下<code>Prefetching</code>的效果。</p><p> <br><strong>Prefetching</strong><br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener('click', () =&gt; &#123;</span><br><span class="line"><span class="addition">+    import(/* webpackPrefetch: true */ './click').then((&#123; default: _ &#125;) =&gt; &#123;</span></span><br><span class="line">        _();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新打包，在浏览器查看页面，打开控制台<code>network</code>，刷新页面可以看到浏览器在直接加载出来了<code>0.js</code>文件(其实不是直接加载，是在<code>index.html</code>,<code>main.js</code>加载完成后加载的)。当我们点击页面的时候，会发现<code>network</code>又重新被加载了一遍。其实不是重新加载了。是之前在页面加载完成后空闲时间加载了<code>0.js</code>。这个时候加载的资源是从缓存中取出。这就是<code>/* webpackPrefetch: true */ Prefetching</code>预加载既能不占首页加载资源时间，又不用在使用的时候才加载的原因。</p><blockquote><p>总结：<code>Preloading</code>和<code>Prefetching</code>的用法相同。不过<code>Preloading</code>是让代码和主代码并行加载。所以不推荐。webpack官方在配置中<code>chunks: 'async'</code>写的是异步，是想让我们编写异步程序来提高代码的性能，缓存能够带来的代码提升非常有限，我们后面写代码程序应该重点关注代码利用率，提高代码利用率才是真正提高代码性能，如果页面代码暂时不用，就采用异步懒加载的形势，主代码加载完成后利用空闲时间来加载其他子代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- 官方推荐分析打包项目网站： www.github.com/webpack/analyse --&gt;
&lt;p&gt;前两章写了代码分割，目的在于优化加载速度。但是，是依靠缓存来优化第二次页面打开的速度。那这篇文章我们就看下怎么可以让页面第一次就可以快速打开。&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-lazy-loading-11</title>
    <link href="http://yoursite.com/2019/07/16/webpack-lazy-loading-11/"/>
    <id>http://yoursite.com/2019/07/16/webpack-lazy-loading-11/</id>
    <published>2019-07-16T06:28:23.000Z</published>
    <updated>2019-07-16T08:45:40.225Z</updated>
    
    <content type="html"><![CDATA[<p>懒加载(或者按需加载)，是一种很好的优化页面加载速度的一种方式。在大型项目中效果尤为明显。其实就是让项目中模块在需要的时候再去加载。(以往的方式都是在首页加载，经常会导致首页加载慢，或者加载不出来的情况)。</p><blockquote><p>注意：如果您使用的是 Babel，你将需要添加 syntax-dynamic-import 插件，才能使 Babel 可以正确地解析语法。</p></blockquote><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // async await promise es7异步函数写法。</span></span><br><span class="line"><span class="addition">+ // default: _ 将引入的lodash 默认为 _</span></span><br><span class="line"><span class="addition">+ async function getComponent()&#123;</span></span><br><span class="line"><span class="addition">+     const &#123; default: _ &#125; = await import(/* webpackChunkName: 'lodash' */ 'lodash');</span></span><br><span class="line"><span class="addition">+     const element = document.createElement('div');</span></span><br><span class="line"><span class="addition">+     element.innerHTML = _.join(['hello', 'world'], "--")</span></span><br><span class="line"><span class="addition">+     return element</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ document.addEventListener('click', () =&gt; &#123;</span></span><br><span class="line"><span class="addition">+     getComponent().then(element =&gt; &#123;</span></span><br><span class="line"><span class="addition">+         document.body.appendChild(element);</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line"><span class="addition">+ &#125;)</span></span><br></pre></td></tr></table></figure><p><strong>运行<code>npm run dev-build</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev-build</span><br></pre></td></tr></table></figure><p>上面的代码的功能是，当在document上点击，执行<code>getComponent()</code>方法。在页面输出 <code>hello--world</code>。这里我们可以打开控制台刷新。切换到ALL模块。刷新页面，可以看到页面加载了 <code>index,js</code>，<code>main.js</code>文件。我们打包的<code>lodash.js</code>并没有加载。当随意点击页面上任何位置。可以看到<code>lodash.js</code>才会加载。这就是我们说的<code>懒加载</code>。在需要的时候才会加载。(我们熟悉的vue项目中的的路由就是利用import语法进行的懒加载的例子。)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;懒加载(或者按需加载)，是一种很好的优化页面加载速度的一种方式。在大型项目中效果尤为明显。其实就是让项目中模块在需要的时候再去加载。(以往的方式都是在首页加载，经常会导致首页加载慢，或者加载不出来的情况)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果您使用的是 Ba
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-Code-Spliting-10</title>
    <link href="http://yoursite.com/2019/07/15/webpack-Code-Spliting-10/"/>
    <id>http://yoursite.com/2019/07/15/webpack-Code-Spliting-10/</id>
    <published>2019-07-15T03:57:19.000Z</published>
    <updated>2019-07-16T06:25:23.362Z</updated>
    
    <content type="html"><![CDATA[<p>Code Spliting (代码分割)。是为了让我们的程序运行性能更高。和webpack无关。没有webpack，我们需要手动进行代码分割。但是在有了webpack之后，webpack可以帮我们做代码分割。</p><h3 id="1-我们需要看下怎么进行手动代码分割-这里以lodash包为例"><a class="header-anchor" href="#1-我们需要看下怎么进行手动代码分割-这里以lodash包为例">¶</a>1. 我们需要看下怎么进行手动代码分割，这里以<code>lodash</code>包为例</h3><p><strong>我们先安装下<code>loadsh</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash --save</span><br></pre></td></tr></table></figure><p><strong>package.json修改，配置开发环境的打包命令</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> "scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development  --colors",</span><br><span class="line"><span class="addition">+    "dev-build": "webpack --colors --config ./build/webpack.dev.js",</span></span><br><span class="line">    "start": "webpack-dev-server --colors --config ./build/webpack.dev.js",</span><br><span class="line">    "build": "webpack --colors --config ./build/webpack.prod.js"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>修改index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+// 删除之前的代码</span></span><br><span class="line"><span class="addition">+// 先引入lodash</span></span><br><span class="line"><span class="addition">+import _ from "lodash"</span></span><br><span class="line"><span class="addition">+console.log(_.join(['a', 'b', 'c'], '-'));</span></span><br></pre></td></tr></table></figure><p><strong>运行<code>npm run dev-build</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev-build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/18.png" alt="Alt"><br>可以看到打包的main.js文件是 577kb。我们的文件只写了两行，为什么打包文件会这么大呢。因为整个lodash库被打包到main.js文件中了。如果我们改了业务逻辑，那么在每次打开页面的时候都要加载这么大的main.js文件。这显然会导致用户体验非常不好。下面我们看下怎样优化。</p><h3 id="2-优化手动代码分割"><a class="header-anchor" href="#2-优化手动代码分割">¶</a>2. 优化手动代码分割</h3><p><strong>新建lodash.js文件，看下文件目录</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line">    |- main.js</span><br><span class="line"><span class="addition">+    |- lodash.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line">|- webpack.dev.js</span><br><span class="line">|- webpack.prod.js</span><br><span class="line">|- webpack.common.js</span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p><strong>lodash.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import _ from "lodash"    //将lodash全局引入</span></span><br><span class="line"><span class="addition">+window._ = _;         // 挂载到 window 上</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-import _ from "lodash"</span></span><br><span class="line"><span class="addition">+console.log(_.join(['a', 'b', 'c'], '-'));</span></span><br></pre></td></tr></table></figure><p><strong>webpack.common.js 这里我们需要添加lodash入口文件</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">entry: &#123;</span><br><span class="line"><span class="addition">+    lodash: './src/lodash.js',</span></span><br><span class="line">    main: './src/index.js',</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>运行<code>npm run dev-build</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev-build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/19.png" alt="Alt"><br>现在我们看到lodash已经被单独打包成一个文件了。main.js文件本身才28.8kb。我们知道浏览器是并行去加载文件的。现在我们就可以同时加载lodash，main文件。浏览器默认缓存静态文件。所以当修改过main.js文件时，再打开页面就只加载main.js文件就可以了。从优化上讲，可以在一定程度上加快加载速度。但是在webpack中，splitChunksPlugin可以帮我们做代码分割。下面我们看下。</p><h3 id="3-webpack同步代码分割"><a class="header-anchor" href="#3-webpack同步代码分割">¶</a>3. webpack同步代码分割</h3><blockquote><p>在配置之前，我们先将手动分割的代码删掉<br><strong>删除lodash.js文件，看下文件目录</strong></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line">    |- main.js</span><br><span class="line"><span class="deletion">-    |- lodash.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line">|- webpack.dev.js</span><br><span class="line">|- webpack.prod.js</span><br><span class="line">|- webpack.common.js</span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p><strong>webpack.common.js 删除lodash入口文件</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">entry: &#123;</span><br><span class="line"><span class="deletion">-    lodash: './src/lodash.js',</span></span><br><span class="line">    main: './src/index.js',</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>现在我们开始设置配置webpack代码分割</strong><br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import _ from "lodash"</span></span><br><span class="line"><span class="addition">+console.log(_.join(['a', 'b', 'c'], '-'));</span></span><br></pre></td></tr></table></figure><p><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'mywebpack',</span><br><span class="line">        template: './index.html',</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin(),</span><br><span class="line">],</span><br><span class="line"><span class="addition">+optimization: &#123;      //优化配置</span></span><br><span class="line"><span class="addition">+    splitChunks: &#123;    </span></span><br><span class="line"><span class="addition">+        chunks: "all"    //代码分割基本配置</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>重新打包。<br><img src="/images/webpack/20.png" alt="Alt"><br>可以看到webpack已经将引入的文件单独打包成一个文件，自动帮我们进行了代码分割。</p><h3 id="4-webpack异步代码分割"><a class="header-anchor" href="#4-webpack异步代码分割">¶</a>4. webpack异步代码分割</h3><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+function getComponent()&#123;</span></span><br><span class="line"><span class="addition">+    return import('lodash').then((&#123; default: _ &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+        let element = document.createElement('div');</span></span><br><span class="line"><span class="addition">+        element.innerHTML = _.join(['hello', 'world'], "-")</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        return element</span></span><br><span class="line"><span class="addition">+    &#125;)</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+getComponent().then(element =&gt; &#123;</span></span><br><span class="line"><span class="addition">+    document.body.appendChild(element);</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>安装动态引入组件语法转换插件 <code>@babel/plugin-syntax-dynamic-import</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/plugin-syntax-dynamic-import --save-dev</span><br></pre></td></tr></table></figure><p><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line">&#123;</span><br><span class="line">"targets": &#123;</span><br><span class="line">"edge": "17",</span><br><span class="line">"firefox": "60",</span><br><span class="line">"safari": "11.1",</span><br><span class="line">"chrome": "67"</span><br><span class="line">&#125;,</span><br><span class="line">"useBuiltIns": "usage",</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">],</span><br><span class="line">"plugins": [</span><br><span class="line">[</span><br><span class="line">    "@babel/plugin-transform-runtime",</span><br><span class="line">    &#123;</span><br><span class="line">      "absoluteRuntime": false,</span><br><span class="line">      "corejs": 2,</span><br><span class="line">      "helpers": true,</span><br><span class="line">      "regenerator": true,</span><br><span class="line">      "useESModules": false</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="addition">+"@babel/plugin-syntax-dynamic-import",</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打包 <code>npm run dev-build</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev-build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/21.png" alt="Alt"><br><img src="/images/webpack/22.png" alt="Alt"><br>现在我们在页面上可以看到异步我们连接的hello-world。异步引入lodash，并且不用写任何配置就可以直接打包。上图中的0.js就是我们打包出来的lodash库</p><h3 id="5-代码分割修改文件名"><a class="header-anchor" href="#5-代码分割修改文件名">¶</a>5. 代码分割修改文件名</h3><blockquote><p>我们看到上面webpack把分割的文件名自动命名成0.js。那么我们如果要自定义文件名怎么写呢？请往下看</p></blockquote><p><strong>修改 <code>index.js</code> 文件`</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getComponent()&#123;</span><br><span class="line"><span class="addition">+    /* webpackChunkName: 'lodash' */  这种是 webpack 魔法注释的写法</span></span><br><span class="line"><span class="addition">+    return import(/* webpackChunkName: 'lodash' */ 'lodash').then((&#123; default: _ &#125;) =&gt; &#123;</span></span><br><span class="line">        let element = document.createElement('div');</span><br><span class="line">        element.innerHTML = _.join(['hello', 'world'], "-")</span><br><span class="line"></span><br><span class="line">        return element</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">getComponent().then(element =&gt; &#123;</span><br><span class="line">    document.body.appendChild(element);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/23.png" alt="Alt"><br>现在我们重新打包就可以看到文件名已经被改成<code>vendors~lodash.js</code>了。前面为什么有个vendors? 我们需要了解<code>splitChunks</code>的更多配置。</p><h3 id="6-splitchunks参数详解"><a class="header-anchor" href="#6-splitchunks参数详解">¶</a>6.splitChunks参数详解</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">默认</th><th style="text-align:left">说明</th><th style="text-align:left">type</th></tr></thead><tbody><tr><td style="text-align:left">chunks</td><td style="text-align:left">async</td><td style="text-align:left">设置代码分割类型，和<code>cacheGroups</code>配合使用。<code>async</code>对异步代码分割。<code>all</code>对同步和异步代码分割。<code>initial</code>对同步代码进行分割</td><td style="text-align:left"><code>string</code></td></tr><tr><td style="text-align:left">minSize</td><td style="text-align:left">30000(30kb)</td><td style="text-align:left">当引入的模块大于30(kb)时才会做代码分割</td><td style="text-align:left">number</td></tr><tr><td style="text-align:left">maxSize</td><td style="text-align:left">0</td><td style="text-align:left">当引入的模块大于<code>maxSize</code>时，会尝试对引入的模块进行二次拆分，一般使用默认配置即可。</td><td style="text-align:left">number</td></tr><tr><td style="text-align:left">minChunks</td><td style="text-align:left">1</td><td style="text-align:left">当一个模块至少被引入1次，才会做代码分割；建议用默认配置。</td><td style="text-align:left">number</td></tr><tr><td style="text-align:left">maxAsyncRequests</td><td style="text-align:left">5</td><td style="text-align:left">当引入5个以上的模块时，只会将前5个引入文件进行代码分割处理。</td><td style="text-align:left">number</td></tr><tr><td style="text-align:left">maxInitialRequests</td><td style="text-align:left">3</td><td style="text-align:left">入口文件引入模块超过3个，只会将前3个进行代码分割。</td><td style="text-align:left">number</td></tr><tr><td style="text-align:left">automaticNameDelimiter</td><td style="text-align:left">~</td><td style="text-align:left">打包的组和文件名之间的连接符，比如上面的vendors~lodash.js</td><td style="text-align:left">string</td></tr><tr><td style="text-align:left">name</td><td style="text-align:left">true</td><td style="text-align:left">拆分块的名称，使<code>cacheGroups</code>中的文件名设置生效</td><td style="text-align:left">boolean</td></tr><tr><td style="text-align:left"><code>cacheGroups</code></td><td style="text-align:left">{}</td><td style="text-align:left">对符合拆分的代码进行一个分类打包设置</td><td style="text-align:left">Object</td></tr></tbody></table><p><strong>cacheGroups参数</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">默认</th><th style="text-align:left">说明</th><th style="text-align:left">type</th></tr></thead><tbody><tr><td style="text-align:left">priority</td><td style="text-align:left">级别</td><td style="text-align:left">当cacheGroups有多个分组时，如果分割的模块同时符合好几个分组，那那个分组的<code>priority</code>的值大，就按照哪个分组分割。</td><td style="text-align:left">number</td></tr><tr><td style="text-align:left">filename</td><td style="text-align:left"><code>vendors~mian。vendors</code></td><td style="text-align:left">拆分的名称，一般不设置，默认生成vendors<sub>mian。vendors分组名称，</sub>连接符，main引入模块的入口文件</td><td style="text-align:left">String</td></tr><tr><td style="text-align:left">reuseExistingChunk</td><td style="text-align:left">true</td><td style="text-align:left">如果当前块包含已从主束拆分的模块，则将重用它而不是生成新的块。比如<code>import a from ‘A’``import b from ‘B’</code>在打包时候，按照打包顺序也会将b打包进a模块，但是在a打包之前，如果已经将b模块进行过打包,那么就不会将b模块在打包到a模块中</td><td style="text-align:left">boolean</td></tr><tr><td style="text-align:left">test</td><td style="text-align:left"><code>/[\\/]node_modules[\\/]/</code></td><td style="text-align:left">控制此缓存组选择的模块。test:/[\/]node_modules[\/]/必须要在node_modules模块在才可以</td><td style="text-align:left">function (module, chunk)</td></tr><tr><td style="text-align:left">enforce</td><td style="text-align:left">true</td><td style="text-align:left">将对<code>splitChunks.minSize</code>,<code>splitChunks.minChunks</code>,<code>splitChunks.maxAsyncRequests</code>,<code>splitChunks.maxInitialRequests</code>配置忽略</td><td style="text-align:left">boolean</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Code Spliting (代码分割)。是为了让我们的程序运行性能更高。和webpack无关。没有webpack，我们需要手动进行代码分割。但是在有了webpack之后，webpack可以帮我们做代码分割。&lt;/p&gt;
&lt;h3 id=&quot;1-我们需要看下怎么进行手动代码分割-这
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack development 和 production 模式的区分打包-9</title>
    <link href="http://yoursite.com/2019/07/10/webpack-development-%E5%92%8C-production-%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%86%E6%89%93%E5%8C%85-9/"/>
    <id>http://yoursite.com/2019/07/10/webpack-development-和-production-模式的区分打包-9/</id>
    <published>2019-07-10T09:24:37.000Z</published>
    <updated>2019-07-15T03:54:41.392Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道，在项目中一般开发的时候需要一些特别的配置。上线生产环境同样需要一些只在生产环境的配置。但是怎么进行打包区分就是一个问题。下面我们看下如何区分开发和生产环境的打包。</p><h3 id="1-development-和-production-模式的区分打包"><a class="header-anchor" href="#1-development-和-production-模式的区分打包">¶</a>1. development 和 production 模式的区分打包</h3><p><strong>先来看文件结构</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line">    |- main.js</span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line"><span class="deletion">-|- webpack.config.js</span></span><br><span class="line"><span class="addition">+|- webpack.dev.js</span></span><br><span class="line"><span class="addition">+|- webpack.prod.js</span></span><br><span class="line"><span class="addition">+|- webpack.common.js</span></span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p> </p><blockquote><p>原来的配置文件都在webpack.config.js中。文件中同时包括生产环境的配置和开发环境的配置。对于在不同环境的打包执行 多出了大量的冗余代码。现在我们将公共的配置提取到<code>webpack.config.js</code>中。对于开发环境配置写在<code>webpack.dev.js</code>中，开发环境的配置写在<code>webpack.prod.js</code>中。</p></blockquote><p><strong>webpack.dev.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 开发环境配置</span><br><span class="line">*/</span><br><span class="line"><span class="addition">+ const path = require('path');</span></span><br><span class="line"><span class="addition">+ const webpack = require('webpack');</span></span><br><span class="line"><span class="addition">+ const merge = require('webpack-merge');       // 合并生产环境配置和公共配置</span></span><br><span class="line"><span class="addition">+ const commonConfig = require('./webpack.common.js');</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"> // 开发环境的配置</span><br><span class="line"><span class="addition">+  const devConfig = &#123;</span></span><br><span class="line"><span class="addition">+     mode: 'development',</span></span><br><span class="line"><span class="addition">+     devtool: 'cheap-module-eval-souce-map',</span></span><br><span class="line"><span class="addition">+     devServer: &#123;</span></span><br><span class="line"><span class="addition">+         contentBase: path.join(__dirname, 'dist'),</span></span><br><span class="line"><span class="addition">+         clientLogLevel: 'info',</span></span><br><span class="line"><span class="addition">+         open: true,</span></span><br><span class="line"><span class="addition">+         host: 'localhost',</span></span><br><span class="line"><span class="addition">+         port: '9090',</span></span><br><span class="line"><span class="addition">+         inline: true,</span></span><br><span class="line"><span class="addition">+         proxy: &#123;</span></span><br><span class="line"><span class="addition">+             '/': &#123;</span></span><br><span class="line"><span class="addition">+                 target: 'http://yagmblog.com/',</span></span><br><span class="line"><span class="addition">+             &#125;,</span></span><br><span class="line"><span class="addition">+             '/upload': &#123;</span></span><br><span class="line"><span class="addition">+                 target: 'http://yagmblog.com'</span></span><br><span class="line"><span class="addition">+             &#125;</span></span><br><span class="line"><span class="addition">+         &#125;,</span></span><br><span class="line"><span class="addition">+         hot: true,</span></span><br><span class="line"><span class="addition">+         hotOnly: true,</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     </span></span><br><span class="line"><span class="addition">+     plugins: [</span></span><br><span class="line"><span class="addition">+         new webpack.HotModuleReplacementPlugin(),</span></span><br><span class="line"><span class="addition">+         // new webpack.DefinePlugin(&#123;</span></span><br><span class="line"><span class="addition">+         //     'process.env.NODE_ENV': JSON.stringify('development')</span></span><br><span class="line"><span class="addition">+         // &#125;)</span></span><br><span class="line"><span class="addition">+     ],</span></span><br><span class="line"><span class="addition">+     optimization: &#123;</span></span><br><span class="line"><span class="addition">+         usedExports: true,</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     </span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line">/**</span><br><span class="line"> *  合并导出 基础公共配置以及开发环境的配置</span><br><span class="line"> **/</span><br><span class="line"><span class="addition">+ module.exports = merge(commonConfig, devConfig);</span></span><br></pre></td></tr></table></figure><p> <br><strong>webpack.prod.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生产环境配置</span><br><span class="line">**/</span><br><span class="line"><span class="addition">+ const merge = require('webpack-merge');      // 合并开发环境配置和公共配置</span></span><br><span class="line"><span class="addition">+ const commonConfig = require('./webpack.common.js');    </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ const prodConfig = &#123;</span></span><br><span class="line"><span class="addition">+     mode: 'production',</span></span><br><span class="line"><span class="addition">+     devtool: 'cheap-module-souce-map',</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line">/**</span><br><span class="line"> *  合并导出 生产环境的配置</span><br><span class="line"> **/</span><br><span class="line"><span class="addition">+ module.exports = merge(commonConfig, prodConfig);</span></span><br></pre></td></tr></table></figure><p> <br><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 公共的配置文件</span><br><span class="line">**/</span><br><span class="line"><span class="addition">+ const path = require('path');</span></span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"><span class="addition">+ const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+ module.exports = &#123;</span></span><br><span class="line"><span class="addition">+     entry: &#123;</span></span><br><span class="line"><span class="addition">+         main: './src/index.js',</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     module: &#123;</span></span><br><span class="line"><span class="addition">+         rules: [&#123;</span></span><br><span class="line"><span class="addition">+             test: /\.js$/, </span></span><br><span class="line"><span class="addition">+             exclude: /(node_modules|bower_components|lib)/,</span></span><br><span class="line"><span class="addition">+             loader: 'babel-loader'</span></span><br><span class="line"><span class="addition">+         &#125;,&#123;</span></span><br><span class="line"><span class="addition">+             test: /\.jpg$/,</span></span><br><span class="line"><span class="addition">+             use: [&#123;</span></span><br><span class="line"><span class="addition">+                     loader: 'url-loader',</span></span><br><span class="line"><span class="addition">+                     options: &#123;</span></span><br><span class="line"><span class="addition">+                         name: '[name].[ext]?[hash]',</span></span><br><span class="line"><span class="addition">+                         publicPath: './dist/img',</span></span><br><span class="line"><span class="addition">+                         outputPath: 'img',</span></span><br><span class="line"><span class="addition">+                         limit: 204800,</span></span><br><span class="line"><span class="addition">+                     &#125;</span></span><br><span class="line"><span class="addition">+                 &#125;</span></span><br><span class="line"><span class="addition">+             ],</span></span><br><span class="line"><span class="addition">+         &#125;,&#123;</span></span><br><span class="line"><span class="addition">+             test: /\.css$/,</span></span><br><span class="line"><span class="addition">+             use: [</span></span><br><span class="line"><span class="addition">+                 "style-loader",</span></span><br><span class="line"><span class="addition">+                 "css-loader",</span></span><br><span class="line"><span class="addition">+                 'postcss-loader',</span></span><br><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="addition">+             ],</span></span><br><span class="line"><span class="addition">+         &#125;,&#123;</span></span><br><span class="line"><span class="addition">+             test: /\.scss$/,</span></span><br><span class="line"><span class="addition">+             use: [</span></span><br><span class="line"><span class="addition">+                 'style-loader',</span></span><br><span class="line"><span class="addition">+                 &#123;</span></span><br><span class="line"><span class="addition">+                     loader: 'css-loader',</span></span><br><span class="line"><span class="addition">+                     options: &#123;</span></span><br><span class="line"><span class="addition">+                         importLoaders: 2,</span></span><br><span class="line"><span class="addition">+                     &#125;</span></span><br><span class="line"><span class="addition">+                 &#125;,</span></span><br><span class="line"><span class="addition">+                 'sass-loader',</span></span><br><span class="line"><span class="addition">+                 'postcss-loader',</span></span><br><span class="line"><span class="addition">+             ]</span></span><br><span class="line"><span class="addition">+         &#125;,&#123;</span></span><br><span class="line"><span class="addition">+             test: /\.(eot|ttf|svg|woff|woff2)$/,</span></span><br><span class="line"><span class="addition">+             use: [&#123;</span></span><br><span class="line"><span class="addition">+                     loader: 'file-loader',</span></span><br><span class="line"><span class="addition">+                     options: &#123;</span></span><br><span class="line"><span class="addition">+                         name: '[name].[ext]',</span></span><br><span class="line"><span class="addition">+                         publicPath: './iconfont',</span></span><br><span class="line"><span class="addition">+                         outputPath: 'iconfont',</span></span><br><span class="line"><span class="addition">+                     &#125;</span></span><br><span class="line"><span class="addition">+                 &#125;</span></span><br><span class="line"><span class="addition">+             ],</span></span><br><span class="line"><span class="addition">+         &#125;]</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     plugins: [</span></span><br><span class="line"><span class="addition">+         new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+             title: 'mywebpack',</span></span><br><span class="line"><span class="addition">+             // filename: 'bundle.html',</span></span><br><span class="line"><span class="addition">+             template: './index.html',</span></span><br><span class="line"><span class="addition">+         &#125;),</span></span><br><span class="line"><span class="addition">+         new CleanWebpackPlugin(),</span></span><br><span class="line"><span class="addition">+     ],</span></span><br><span class="line"><span class="addition">+     output: &#123;</span></span><br><span class="line"><span class="addition">+         // publicPath: '/',   </span></span><br><span class="line"><span class="addition">+         filename: '[name].js',</span></span><br><span class="line"><span class="addition">+         path: path.resolve(__dirname, 'dist')</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>重新配置打包不同环境的运行命令</p></blockquote><p> <br><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development  --colors",</span><br><span class="line">    "prod": "webpack --mode production --env production --colors",</span><br><span class="line"><span class="addition">+    "start": "webpack-dev-server --colors --config webpack.dev.js",    // 开发环境运行命令</span></span><br><span class="line"><span class="addition">+    "build": "webpack --colors --config webpack.prod.js"          // 生产环境运行命令</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> <br><strong>运行<code>npm run build</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>运行完成在浏览器打开dist/main.js可以看到控制台打印出4(为什么打印出4上篇博客有写。)说明拆分配置成功。</p><p> <br><strong>一般项目中都会把配置文件放在根目录文件夹里，目录如下</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+|- build</span></span><br><span class="line"><span class="addition">+    |- webpack.common.js</span></span><br><span class="line"><span class="addition">+    |- webpack.dev.js</span></span><br><span class="line"><span class="addition">+    |- webpack.prod.js</span></span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line">    |- main.js</span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line"><span class="deletion">-|- webpack.dev.js</span></span><br><span class="line"><span class="deletion">-|- webpack.prod.js</span></span><br><span class="line"><span class="deletion">-|- webpack.common.js</span></span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p> <br><strong>webpack.common.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">output: &#123; </span><br><span class="line">    filename: '[name].js',</span><br><span class="line"><span class="addition">+    path: path.resolve(__dirname, '../', 'dist')    // 这里的 __dirname 会指到build文件夹下面，所以打包的时候需要跳到上一层。这样打包的文件夹才会在根目录下面。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，package,json中的 <code>CleanWebpackPlugin</code> 插件我这里使用的 <code>3.0.0</code> 版本的。当dist目录改变的时候，<code>CleanWebpackPlugin</code>的清除路径也会随着打包路径的改变。不用我们手动去配置。但是在<code>CleanWebpackPlugin 2.0</code>版本以下。路径就需要我们去手动重新配置了。具体配置请网上自行搜索。</p><p> <br><strong>package.json这边相应的的文件目录也需要更改为<code>./build/webpack.dev.js</code></strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development  --colors",</span><br><span class="line">    "prod": "webpack --mode production --env production --colors",</span><br><span class="line"><span class="addition">+    "start": "webpack-dev-server --colors --config ./build/webpack.dev.js",    // 开发环境运行命令</span></span><br><span class="line"><span class="addition">+    "build": "webpack --colors --config ./build/webpack.prod.js"          // 生产环境运行命令</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> <br><strong>运行<code>npm run build</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>打包完成后在浏览器打开dist/index.html.可以看到控制台会打印出4。 说明打包正常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们都知道，在项目中一般开发的时候需要一些特别的配置。上线生产环境同样需要一些只在生产环境的配置。但是怎么进行打包区分就是一个问题。下面我们看下如何区分开发和生产环境的打包。&lt;/p&gt;
&lt;h3 id=&quot;1-development-和-production-模式的区分打包&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack Tree shaking-8</title>
    <link href="http://yoursite.com/2019/07/10/webpack-Tree-shaking-8/"/>
    <id>http://yoursite.com/2019/07/10/webpack-Tree-shaking-8/</id>
    <published>2019-07-10T03:26:04.000Z</published>
    <updated>2019-07-10T09:06:01.013Z</updated>
    
    <content type="html"><![CDATA[<p>Tree shaking 意思就是摇树。当我们在一个js文件中写入了多个导出方法时，但只引入了一部分方法。那么打包的时候 Tree shaking 就会帮我们自动打包引入的文件。其他没引入的方法进行打包</p><h3 id="1-tree-shaking"><a class="header-anchor" href="#1-tree-shaking">¶</a>1. Tree shaking</h3><p><strong>先来看文件结构</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line"><span class="addition">+    |- main.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line">|- .babelrc</span><br></pre></td></tr></table></figure><p> <br><strong>src/main.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+export const add = (a, b) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+    console.log(a + b);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+export const minus = (a, b) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+    console.log(a - b);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p> <br><strong>src/index.js删除原来的代码</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import &#123; add &#125; from "./main.js"</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+add(1, 2)</span></span><br></pre></td></tr></table></figure><p> <br>运行webpack, development模式打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> <br>打包完成后，打开dist/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">"./src/main.js"</span>:</span><br><span class="line"><span class="comment">/*!*********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/main.js ***!</span></span><br><span class="line"><span class="comment">  \*********************/</span></span><br><span class="line"><span class="comment">/*! exports provided: add, minus */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() &#123; return add; &#125;);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"minus\", function() &#123; return minus; &#125;);\nconst add = (a, b) =&gt; &#123;\n  console.log(a + b);\n&#125;;\nconst minus = (a, b) =&gt; &#123;\n  console.log(a - b);\n&#125;;\n\n//# sourceURL=webpack:///./src/main.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br></pre></td></tr></table></figure><p>我们可以看到 add minus 方法都打包进来了。但其实我们没用到minus。这样就使我们的打包文件变大了。下面我们看下使用 Tree shaking 怎么可以不打包没用的代码。</p><h3 id="2-tree-shaking开发环境-development-的配置"><a class="header-anchor" href="#2-tree-shaking开发环境-development-的配置">¶</a>2. Tree shaking开发环境(development)的配置</h3><p> <br><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="addition">+optimization: &#123;      // 对代码优化的配置</span></span><br><span class="line"><span class="addition">+    usedExports: true,    // 设置只对使用的方法进行打包。只在 development 环境下进行设置。production模式已经内置了 Tree shaking 帮我们处理代码 。</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line">output: &#123;</span><br><span class="line">    // publicPath: '/',   </span><br><span class="line">    filename: '[name].js',</span><br><span class="line">    path: path.resolve(__dirname, 'dist')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>package.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",</span><br><span class="line"><span class="addition">+  "sideEffects": [     // Tree shaking 默认会对所有的文件进行处理打包。对于类似css这种没有导出的文件也会tree shaking。会被过滤掉。但事实是我们是需要这个文件的。所以需要我们在这里进行将css文件单独列出来，让它不被tree shaking处理。如果没有文件需要特殊处理。直接设置为false即可。</span></span><br><span class="line"><span class="addition">+    ]    "*.css"</span></span><br><span class="line"><span class="addition">+  ],</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br>运行webpack, development模式打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> <br>打包完成后，打开dist/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">"./src/main.js"</span>:</span><br><span class="line"><span class="comment">/*!*********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/main.js ***!</span></span><br><span class="line"><span class="comment">  \*********************/</span></span><br><span class="line"><span class="comment">/*! exports provided: add, minus */</span></span><br><span class="line"><span class="comment">/*! exports used: add */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() &#123; return add; &#125;);\n/* unused harmony export minus */\nconst add = (a, b) =&gt; &#123;\n  console.log(a + b);\n&#125;;\nconst minus = (a, b) =&gt; &#123;\n  console.log(a - b);\n&#125;;\n\n//# sourceURL=webpack:///./src/main.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br></pre></td></tr></table></figure><p>我们可以看到 较配置之前的打包，注释多了行: <code>exports used: add</code>。这说明我们的配置生效了。但是在<code>development</code>模式下依然会帮我们把未使用的方法打包进来。development模式下删除未使用的方法不利于错误的行数定位。当模式为<code>production</code>线上生产环境。未使用的方法会自动帮我们删掉。放在这个代码中，就是帮我们删掉<code>minus</code>这个方法(ps: 不打包)。</p><h3 id="3-tree-shaking生产环境-production-的配置"><a class="header-anchor" href="#3-tree-shaking生产环境-production-的配置">¶</a>3. Tree shaking生产环境(production)的配置</h3><p> <br><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="addition">+mode: 'production',</span></span><br><span class="line"><span class="deletion">-    devtool: 'cheap-module-eval-souce-map',</span></span><br><span class="line"><span class="addition">+    devtool: 'cheap-module-souce-map',</span></span><br><span class="line"><span class="deletion">-optimization: &#123;      </span></span><br><span class="line"><span class="deletion">-    usedExports: true,    </span></span><br><span class="line"><span class="deletion">-&#125;,</span></span><br><span class="line">output: &#123;</span><br><span class="line">    // publicPath: '/',   </span><br><span class="line">    filename: '[name].js',</span><br><span class="line">    path: path.resolve(__dirname, 'dist')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br>现在我们运行webpack, production 模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run prod</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/17.png" alt="Alt"><br>现在我们看到在production打包的文件dist/main.js里面只有方法的<code>add</code>被打包进来。<code>minus</code>方法已经去掉了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Tree shaking 意思就是摇树。当我们在一个js文件中写入了多个导出方法时，但只引入了一部分方法。那么打包的时候 Tree shaking 就会帮我们自动打包引入的文件。其他没引入的方法进行打包&lt;/p&gt;
&lt;h3 id=&quot;1-tree-shaking&quot;&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack处理ES6语法-7</title>
    <link href="http://yoursite.com/2019/07/03/webpack%E5%A4%84%E7%90%86ES6%E8%AF%AD%E6%B3%95-7/"/>
    <id>http://yoursite.com/2019/07/03/webpack处理ES6语法-7/</id>
    <published>2019-07-03T03:07:44.000Z</published>
    <updated>2019-07-10T04:38:57.161Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，ES6语法目前是不能被大部分主流浏览器所识别的。我们项目中所用的框架都是帮我们做好了ES6转ES5。所以我们可以直接使用ES6。<br>那么我们自己去配置项目的时候语法怎么处理呢。下面我们就来看下语法转换。</p><ul><li><strong><a href="https://babeljs.io/setup#installation" target="_blank" rel="noopener"><font color="#42A8E1">babel官网</font></a></strong></li></ul><h3 id="1-安装babel"><a class="header-anchor" href="#1-安装babel">¶</a>1.安装babel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core</span><br></pre></td></tr></table></figure><p> <br><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><br><span class="line">const webpack = require('webpack');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, 'dist'),</span><br><span class="line">        clientLogLevel: 'info',</span><br><span class="line">        open: true,</span><br><span class="line">        host: 'localhost',</span><br><span class="line">        port: '9090',</span><br><span class="line">        inline: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            '/': &#123;</span><br><span class="line">                target: 'http://yagmblog.com/',</span><br><span class="line">            &#125;,</span><br><span class="line">            '/upload': &#123;</span><br><span class="line">                target: 'http://yagmblog.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        hot: true,</span><br><span class="line">        hotOnly: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line"><span class="addition">+            test: /\.js$/, </span></span><br><span class="line"><span class="addition">+            exclude: /(node_modules|bower_components|lib)/,</span></span><br><span class="line"><span class="addition">+            loader: 'babel-loader'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                "style-loader",</span><br><span class="line">                "css-loader",</span><br><span class="line">                'postcss-loader',</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: 'css-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: 2,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                'sass-loader',</span><br><span class="line">                'postcss-loader',</span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new webpack.HotModuleReplacementPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '/',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>文件结构</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line"><span class="addition">+ |- .babelrc</span></span><br></pre></td></tr></table></figure><p> <br><strong>安装@babel/preset-env</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure><p> <br><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  "presets": ["@babel/preset-env"]</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p> <br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;),</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.map(val =&gt; &#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <br><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"><span class="addition">+    "dev": "webpack --mode development --env development  --colors",</span></span><br><span class="line">    "prod": "webpack --mode production --env production --colors",</span><br><span class="line">    "start": "webpack-dev-server --colors"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> <br>打包完成后我们能看到dist目录下面的main.js, 最下面我们可以找到下面的这段代码(也可以直接搜索index.js)。 const被编译成var，箭头语法也被编译成function。已经实现了ES6到ES5的转换。但这只转换了一部分。在一些低版本浏览器中promise和map依然识别不了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">"./src/index.js"</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/*! no static exports found */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"// import \"./assets/css/index.css\"\nvar arr = [new Promise(function () &#123;&#125;), new Promise(function () &#123;&#125;)];\narr.map(function (val) &#123;\n  console.log(val);\n&#125;);\n\n//# sourceURL=webpack:///./src/index.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br></pre></td></tr></table></figure><p> </p><h3 id="2-兼容低版本浏览器"><a class="header-anchor" href="#2-兼容低版本浏览器">¶</a>2.兼容低版本浏览器</h3><p><strong>安装@babel/polyfill</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure><p> <br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import "@babel/polyfill"</span></span><br><span class="line"></span><br><span class="line">const arr = [</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;),</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.map(val =&gt; &#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/15.png" alt="Alt"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">"./node_modules/@babel/polyfill/lib/index.js"</span>:</span><br><span class="line"><span class="comment">/*!***************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/@babel/polyfill/lib/index.js ***!</span></span><br><span class="line"><span class="comment">  \***************************************************/</span></span><br><span class="line"><span class="comment">/*! no static exports found */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"\n\n__webpack_require__(/*! ./noConflict */ \"./node_modules/@babel/polyfill/lib/noConflict.js\");\n\nvar _global = _interopRequireDefault(__webpack_require__(/*! core-js/library/fn/global */ \"./node_modules/core-js/library/fn/global.js\"));\n\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;\n\nif (_global.default._babelPolyfill &amp;&amp; typeof console !== \"undefined\" &amp;&amp; console.warn) &#123;\n  console.warn(\"@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended \" + \"and may have consequences if different versions of the polyfills are applied sequentially. \" + \"If you do need to load the polyfill more than once, use @babel/polyfill/noConflict \" + \"instead to bypass the warning.\");\n&#125;\n\n_global.default._babelPolyfill = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/polyfill/lib/index.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br></pre></td></tr></table></figure><p>从打包的main.js中可以看到，Promise和map方法  @babel/polyfill 已经帮我们做了实现，但是打包文件突然增大到400多kb。是因为main.js文件将整个<br>polyfill都打包进来。但是我们想要的是我们在index.js文件用到的方法帮我们做打包处理，没用到的方法就不需要打包进main.js</p><p> </p><h3 id="3-现在我们配置让它只打包我们用到的方法"><a class="header-anchor" href="#3-现在我们配置让它只打包我们用到的方法">¶</a>3.现在我们配置让它只打包我们用到的方法</h3><p><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+"useBuiltIns": "usage",</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/16.png" alt="Alt"><br>当我们配置了.babelrc的 “useBuiltIns”: “usage”  再次打包,发现我们的打包文件已经到90多kb了。“useBuiltIns”: &quot;usage&quot;的特性就是当polyfill低版本的浏览器添加一些特性的时候，不是把所有的特性都加进去。而是我们用到什么才去添加什么。</p><p> </p><h3 id="4-设置浏览器版本"><a class="header-anchor" href="#4-设置浏览器版本">¶</a>4.设置浏览器版本</h3><p><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line">&#123;</span><br><span class="line"><span class="addition">+"targets": &#123;</span></span><br><span class="line"><span class="addition">+"edge": "17",</span></span><br><span class="line"><span class="addition">+"firefox": "60",</span></span><br><span class="line"><span class="addition">+"safari": "11.1",</span></span><br><span class="line"><span class="addition">+"chrome": "67"</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line">"useBuiltIns": "usage",</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“chrome”: “67” 指编译的代码要运行在67版本的chrome浏览器上， 如果chrome67版本的chrome支持promise语法，则不转换，否则就转换。<br> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> </p><h3 id="5-插件开发"><a class="header-anchor" href="#5-插件开发">¶</a>5.插件开发</h3><p>平时开发直接引入就可以用了。但如果是开发插件，上面那种promise 全局引入会污染全局环境。下面用插件安装的方式来引入</p><p><strong>安装pluginTransformRuntime</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br><span class="line">npm install --save-dev @babel/runtime</span><br><span class="line">npm install --save-dev @babel/runtime-corejs2</span><br></pre></td></tr></table></figure><p> <br><strong>babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line">&#123;</span><br><span class="line">"targets": &#123;</span><br><span class="line">"edge": "17",</span><br><span class="line">"firefox": "60",</span><br><span class="line">"safari": "11.1",</span><br><span class="line">"chrome": "67"</span><br><span class="line">&#125;,</span><br><span class="line">"useBuiltIns": "usage",</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">],</span><br><span class="line"><span class="addition">+"plugins": [</span></span><br><span class="line"><span class="addition">+[</span></span><br><span class="line"><span class="addition">+    "@babel/plugin-transform-runtime",</span></span><br><span class="line"><span class="addition">+    &#123;</span></span><br><span class="line"><span class="addition">+      "absoluteRuntime": false,</span></span><br><span class="line"><span class="addition">+      "corejs": 2,</span></span><br><span class="line"><span class="addition">+      "helpers": true,</span></span><br><span class="line"><span class="addition">+      "regenerator": true,</span></span><br><span class="line"><span class="addition">+      "useESModules": false</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+]</span></span><br><span class="line"><span class="addition">+]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打包完成之后，可以看到 promise和map依然会帮我们进行处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道，ES6语法目前是不能被大部分主流浏览器所识别的。我们项目中所用的框架都是帮我们做好了ES6转ES5。所以我们可以直接使用ES6。&lt;br&gt;
那么我们自己去配置项目的时候语法怎么处理呢。下面我们就来看下语法转换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-devServer开发配置-6</title>
    <link href="http://yoursite.com/2019/06/28/webpack-devServer%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE-6/"/>
    <id>http://yoursite.com/2019/06/28/webpack-devServer开发配置-6/</id>
    <published>2019-06-28T06:54:08.000Z</published>
    <updated>2019-07-01T08:35:52.010Z</updated>
    
    <content type="html"><![CDATA[<p>webpack-dev-server是一个快速搭建本地运行环境的工具，实际开发中我们需要请求接口调用数据。在我们以前的打包文件中，直接在浏览器打开是file协议，而file是无法调取接口的，webpack-dev-server可以帮我们将file协议改成http协议。</p><p>webpack-dev-server 实现以下功能：</p><ul><li>自动打开浏览器</li><li>调试接口</li><li>实时刷新</li><li>热更新</li><li>使用代理</li></ul><h3 id="1-安装-webpack-dev-server-插件-自动打开浏览器-调试接口-实时刷新-使用代理"><a class="header-anchor" href="#1-安装-webpack-dev-server-插件-自动打开浏览器-调试接口-实时刷新-使用代理">¶</a>1.安装 webpack-dev-server 插件 (自动打开浏览器 | 调试接口 | 实时刷新 | 使用代理)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    devServer: &#123;      //添加devServer配置</span></span><br><span class="line"><span class="addition">+        contentBase: path.join(__dirname, 'dist'),   // 设置文件的根目录</span></span><br><span class="line"><span class="addition">+        clientLogLevel: 'info',      // 在开发工具(DevTools)的控制台(console)将显示消息，如：在重新加载之前，在一个错误之前，或者模块热替换(Hot Module Replacement)启用</span></span><br><span class="line"><span class="addition">+        open: true,        // 编译完成后自动帮我们打开默认浏览器</span></span><br><span class="line"><span class="addition">+        host: 'localhost',   // 默认为localhost, 如果在局域网内想让别人也可以访问，可以设置成你的本机地址，比如：192.168.0.120</span></span><br><span class="line"><span class="addition">+        port: '9090',       // 页面访问的端口</span></span><br><span class="line"><span class="addition">+        inline: true,       // 实时更新</span></span><br><span class="line"><span class="addition">+        proxy: &#123;            //设置代理</span></span><br><span class="line"><span class="addition">+            '/api': &#123;            // 如果请求到 /api/users , 现在会被代理到请求 http://yagmblog.com/api/users , /api会被target替换。如果不想始终传递 /api, 则需要重写路径。 </span></span><br><span class="line"><span class="addition">+                target: 'http://yagmblog.com/',</span></span><br><span class="line"><span class="addition">+                pathRewrite:  &#123;               //重写路径</span></span><br><span class="line"><span class="addition">+                    '/api': ''</span></span><br><span class="line"><span class="addition">+                &#125;</span></span><br><span class="line"><span class="addition">+            &#125;,</span></span><br><span class="line"><span class="addition">+            '/upload': &#123;        //配置图片上传代理</span></span><br><span class="line"><span class="addition">+                target: 'http://yagmblog.com'</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+        &#125;,</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                "style-loader",</span><br><span class="line">                "css-loader",</span><br><span class="line">                'postcss-loader',</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: 'css-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: 2,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                'sass-loader',</span><br><span class="line">                'postcss-loader',</span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '/',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development --watch  --colors --progress",</span><br><span class="line">    "prod": "webpack --mode production --env production --colors --progress",</span><br><span class="line"><span class="addition">+    "start": "webpack-dev-server --colors --progress", //配置本地开发运行命令 --colors 对编译提示信息添加颜色，--progress显示编译进度</span></span><br><span class="line">    "server": "node server.js  "</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "autoprefixer": "^9.5.1",</span><br><span class="line">    "clean-webpack-plugin": "^3.0.0",</span><br><span class="line">    "css-loader": "^2.1.1",</span><br><span class="line">    "express": "^4.17.1",</span><br><span class="line">    "extract-text-webpack-plugin": "^4.0.0-beta.0",</span><br><span class="line">    "file-loader": "^3.0.1",</span><br><span class="line">    "html-webpack-plugin": "^3.2.0",</span><br><span class="line">    "node-sass": "^4.12.0",</span><br><span class="line">    "postcss-loader": "^3.0.0",</span><br><span class="line">    "sass-loader": "^7.1.0",</span><br><span class="line">    "style-loader": "^0.23.1",</span><br><span class="line">    "url-loader": "^1.1.2",</span><br><span class="line">    "webpack": "^4.32.2",</span><br><span class="line">    "webpack-cli": "^3.3.2",</span><br><span class="line">    "webpack-dev-middleware": "^3.7.0",</span><br><span class="line">    "webpack-dev-server": "^3.7.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><h3 id="2-模块热替换-hmr-hotmodulereplacementplugin"><a class="header-anchor" href="#2-模块热替换-hmr-hotmodulereplacementplugin">¶</a>2.模块热替换 HMR( HotModuleReplacementPlugin )</h3><p>现在我们将webpack.config.js进行修改：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><br><span class="line"><span class="addition">+ const webpack = require('webpack');   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, 'dist'),</span><br><span class="line">        clientLogLevel: 'info',</span><br><span class="line">        open: true,</span><br><span class="line">        host: '192.168.0.129',</span><br><span class="line">        port: '9090',</span><br><span class="line">        inline: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            '/': &#123;</span><br><span class="line">                target: 'http://yagmblog.com/',</span><br><span class="line">            &#125;,</span><br><span class="line">            '/upload': &#123;</span><br><span class="line">                target: 'http://yagmblog.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="addition">+        hot: true,    // 配置devServe的热更新</span></span><br><span class="line"><span class="addition">+        hotOnly: true,  // 如果更新失败，不做任何操作： 默认刷新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                "style-loader",</span><br><span class="line">                "css-loader",</span><br><span class="line">                'postcss-loader',</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: 'css-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: 2,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                'sass-loader',</span><br><span class="line">                'postcss-loader',</span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line"><span class="addition">+        new webpack.HotModuleReplacementPlugin()      // 热更新插件</span></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '/',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;!-- 设置文档标题 --&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="addition">+    &lt;div id="root"&gt;蔓羊博客&lt;/div&gt;</span></span><br><span class="line">    &lt;span class="iconfont icon-changjingguanli"&gt;&lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import "./assets/css/index.css"</span></span><br></pre></td></tr></table></figure><p><strong>index.css</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ div &#123;</span></span><br><span class="line"><span class="addition">+    color: pink;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>写好后，运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>现在浏览器页面上显示粉色的 蔓羊博客。现在打开index.css文件，将样式改成绿色,保存。：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line"><span class="addition">+    color: green;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回浏览器页面, 现在可以看到控制台doc里面没有请求，也就是没有刷新，但是字体已经变成绿色了.这就是 HotModuleReplacementPlugin 的作用。<br>在不刷新浏览器的情况下可以即时的更改css样式。对于前端写经常写样式的小伙伴来说。真的是非常方便了。但是对js文件就不起作用了。<br><img src="/images/webpack/12.png" alt="Alt"></p><h3 id="2-1-js模块热替换"><a class="header-anchor" href="#2-1-js模块热替换">¶</a>2.1 js模块热替换</h3><p>现在我们在src下面和index.js目录同级新建一个test.js 文件<br><strong>test.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+function add()&#123;</span></span><br><span class="line"><span class="addition">+var div = document.createElement('div');</span></span><br><span class="line"><span class="addition">+    div.innerHTML = 'hello';</span></span><br><span class="line"><span class="addition">+    div.setAttribute('id', 'add')</span></span><br><span class="line"><span class="addition">+document.body.appendChild(div);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ export default add</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  import "./assets/css/index.css"</span><br><span class="line"><span class="addition">+ import add from "./test.js";</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ window.onload = function()&#123;</span></span><br><span class="line"><span class="addition">+add();</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>上面的代码想实现的是， 创建一个div并设置内容为hello, 然后挂载到body上</strong></p><p>现在重新运行：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>可以看到hello 已经显示在页面上了。<br><img src="/images/webpack/13.png" alt="Alt"></p><p><strong>现在我们将test.js文件内容 hello 999修改为 hello world,保存文件。返回查看浏览器，这里注意，不要刷新浏览器。会发现我们页面上的hello并没有变</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add()&#123;</span><br><span class="line">var div = document.createElement('div');</span><br><span class="line"><span class="addition">+    div.innerHTML = 'hello world';</span></span><br><span class="line">    div.setAttribute('id', 'add')</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default add</span><br></pre></td></tr></table></figure><p><strong>修改index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import "./assets/css/index.css"</span><br><span class="line">import add from "./test.js";</span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+if(module.hot)&#123;     // 相当于监听</span></span><br><span class="line"><span class="addition">+module.hot.accept('./test.js', (() =&gt; &#123;     // 当test.js文件有变动时，先移除原来的dom，在添加新的dom</span></span><br><span class="line"><span class="addition">+document.body.removeChild(document.getElementById('add'));</span></span><br><span class="line"><span class="addition">+add();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+&#125;))</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p><strong>保存后刷新浏览器，我们看到现在页面上显示的是刚才修改过的hello world。现在我们修改test.js文件。将hello world修改成world。保存。返回查看浏览器不要刷新，这个时候页面上的内容已经变成world 。</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add()&#123;</span><br><span class="line">var div = document.createElement('div');</span><br><span class="line"><span class="addition">+    div.innerHTML = 'world';</span></span><br><span class="line">    div.setAttribute('id', 'add')</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default add</span><br></pre></td></tr></table></figure><p>从上面可以知道。当我们使用热更新时，只有样式会被更新。js文件并不会更新。需要js更新，就需要手动编写module.hot。先进行dom移除再添加。但是我们在写项目的时候一般也不会写 module.hot。项目依然可以更新是为什么呢？ 这是由于我们写的项目所用的框架里面已经集成了热更新，比如：vue-loader, react-hot-loader 。所以一般不需要我们自己去写。但是原理我们要明白。其实css文件也不会更新。只不过css-loader里面帮我们集成了更新的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack-dev-server是一个快速搭建本地运行环境的工具，实际开发中我们需要请求接口调用数据。在我们以前的打包文件中，直接在浏览器打开是file协议，而file是无法调取接口的，webpack-dev-server可以帮我们将file协议改成http协议。&lt;/p
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包iconfont-5</title>
    <link href="http://yoursite.com/2019/06/27/webpack%E6%89%93%E5%8C%85iconfont-5/"/>
    <id>http://yoursite.com/2019/06/27/webpack打包iconfont-5/</id>
    <published>2019-06-27T09:31:21.000Z</published>
    <updated>2019-06-28T06:54:25.443Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，避免不了要使用字体图标文件。这里我们看下iconfont打包配置<br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图标</a><br><strong>将下载的iconfont文件放入src/assets/下面的iconfont文件夹下</strong><br>开始之前，为了文件结构清晰，我们将js, css, scss, iconfont文件统一放入assets文件夹，目录如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line"><span class="addition">+    |- assets</span></span><br><span class="line"><span class="addition">+        |- images</span></span><br><span class="line"><span class="addition">+        |    |- 1.jpg</span></span><br><span class="line"><span class="addition">+        |- css      </span></span><br><span class="line"><span class="addition">+        |    |- index.css   </span></span><br><span class="line"><span class="addition">+        |- scss      </span></span><br><span class="line"><span class="addition">+        |    |- index.scss   </span></span><br><span class="line"><span class="addition">+        |- iconfont</span></span><br><span class="line"><span class="addition">+             |- demo_index.html</span></span><br><span class="line"><span class="addition">+             |- demo.css</span></span><br><span class="line"><span class="addition">+             |- iconfont.css</span></span><br><span class="line"><span class="addition">+             |- iconfont.eot</span></span><br><span class="line"><span class="addition">+             |- iconfont.svg</span></span><br><span class="line"><span class="addition">+             |- iconfont.js</span></span><br><span class="line"><span class="addition">+             |- iconfont.ttf</span></span><br><span class="line"><span class="addition">+             |- iconfont.woff</span></span><br><span class="line"><span class="addition">+             |- iconfont.woff2</span></span><br><span class="line"><span class="addition">+    |- index.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br></pre></td></tr></table></figure><p><strong>index.js 做以下改动</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="addition">+import yimg from "./assets/images/1.jpg"   //更改引入目录</span></span><br><span class="line"><span class="addition">+import test from "./assets/css/index.css"  //更改引入目录</span></span><br><span class="line"><span class="addition">+import avatar from "./assets/sass/index.scss"   //更改引入目录</span></span><br><span class="line"><span class="addition">+import "./assets/iconfont/iconfont.css"   //引入iconfont.css文件</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line">//var image = new Image();</span><br><span class="line">//image.src = yimg;</span><br><span class="line">//image.classList.add('test');</span><br><span class="line">//image.classList.add('img');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">root.append(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html 文件使用字体文件</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;!-- 设置文档标题 --&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id="root"&gt;&lt;/div&gt;</span><br><span class="line"><span class="addition">+    &lt;span class="iconfont icon-changjingguanli"&gt;&lt;/span&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>webpack.config.js中加入打包处理方案</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">        module: &#123;</span><br><span class="line">            rules: [&#123;</span><br><span class="line">                test: /\.jpg$/,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: 'url-loader',</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: '[name].[ext]?[hash]',</span><br><span class="line">                            publicPath: './dist/img',</span><br><span class="line">                            outputPath: 'img',</span><br><span class="line">                            limit: 204800,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    'css-loader',</span><br><span class="line">                    'postcss-loader',  </span><br><span class="line">                ]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    'css-loader',</span><br><span class="line">                    'postcss-loader',  </span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: 'css-loader',      </span><br><span class="line">                        options: &#123; </span><br><span class="line">                            importLoader: 2        </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    'scss-loader',</span><br><span class="line">                    'postcss-loader',      </span><br><span class="line">                ]</span><br><span class="line"><span class="addition">+            &#125;,&#123;</span></span><br><span class="line"><span class="addition">+                test: /\.(eot|ttf|svg|woff|woff2)$/,   //匹配iconfont文件</span></span><br><span class="line"><span class="addition">+                use: [</span></span><br><span class="line"><span class="addition">+                    &#123;</span></span><br><span class="line"><span class="addition">+                        loader: 'file-loader',      //使用file-loader处理</span></span><br><span class="line"><span class="addition">+                        options: &#123;                  //配置项</span></span><br><span class="line"><span class="addition">+                            name: '[name].[ext]',   // 打包生成的文件名字</span></span><br><span class="line"><span class="addition">+                            publicPath: './iconfont',   //打包完成后index.html引入的iconfont的路径</span></span><br><span class="line"><span class="addition">+                            outputPath: 'iconfont',    // 打包完成后dist下面放iconfont文件的文件夹</span></span><br><span class="line"><span class="addition">+                        &#125;</span></span><br><span class="line"><span class="addition">+                    &#125;</span></span><br><span class="line"><span class="addition">+                 ],</span></span><br><span class="line"><span class="addition">+           &#125;]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <br>运行打包命令 npm run dev , 可以看到iconfont被成功引入到页面中：<br><img src="/images/webpack/11.png" alt="Alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中，避免不了要使用字体图标文件。这里我们看下iconfont打包配置&lt;br&gt;
&lt;a href=&quot;https://www.iconfont.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里巴巴矢量图标&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;将下载的
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack便捷打包配置-4</title>
    <link href="http://yoursite.com/2019/06/27/webpack%E4%BE%BF%E6%8D%B7%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE-4/"/>
    <id>http://yoursite.com/2019/06/27/webpack便捷打包配置-4/</id>
    <published>2019-06-27T02:57:34.000Z</published>
    <updated>2019-06-27T07:35:18.334Z</updated>
    
    <content type="html"><![CDATA[<ul><li>html-webpack-plugin</li><li>clean-webpack-plugin</li></ul><p>前面我们打开文件一直用的自己写的入口文件 index.html 。在实际的开发生产过程中。需要把入口文件以及打包后的文件上传到服务器。这样我们每次都要把index.html文件放在打包文件夹里面，并且一个个去引入生成的js及css文件(ps:生成的文件名一般都带有hash值，来保证页面上引入的文件是最新的打包文件)这样会很麻烦。其实是有插件来帮我们做这些事情的。</p><ul><li>html-webpack-plugin 为打包的文件生成一个入口的html文件。默认index.html</li></ul><h3 id="1-html-webpack-plugin-插件"><a class="header-anchor" href="#1-html-webpack-plugin-插件">¶</a>1. html-webpack-plugin 插件</h3><p> </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ npm install --save-dev html-webpack-plugin</span></span><br></pre></td></tr></table></figure><p>webpack.config.js文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+   const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        module: &#123;&#125;,</span><br><span class="line"><span class="addition">+       plugins: [</span></span><br><span class="line"><span class="addition">+            new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+                title: 'mywebpackdemo',      //设置文档标题</span></span><br><span class="line"><span class="addition">+                filename: 'index.html',      //设置生成html文件的名字</span></span><br><span class="line"><span class="addition">+                template: './index.html'     // 如果想要生成的文件是你自己写的，就把你写的文件路径写在这，作为模板。这里我将根目录下的index.html作为模板</span></span><br><span class="line"><span class="addition">+            &#125;)</span></span><br><span class="line"><span class="addition">+       ],</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>index.html文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;!-- 设置文档标题 --&gt;</span><br><span class="line"><span class="addition">+    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id="root"&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line"><span class="deletion">-    &lt;script src="./dist/main.js"&gt;&lt;/script&gt;     //去掉前面手动引入的文件</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> <br>现在打开命令行终端, 输入 打包命令： npm run dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打包完成后，在浏览器打开dist下面的index.html文件，可以看到生成的index.html已经自动为我们引入了main.js文件<br><img src="/images/webpack/10.png" alt="Alt"></p><p> </p><h3 id="1-clean-webpack-plugin-插件"><a class="header-anchor" href="#1-clean-webpack-plugin-插件">¶</a>1. clean-webpack-plugin 插件</h3><p>clean-webpack-plugin 一个清除文件的插件。 可以帮我们每次打包时，自动帮我们清除dist目录下面的原来的打包文件。</p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>webpack.config.js文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"><span class="addition">+   const &#123; CleanWabpckPlugin &#125; = require('clean-webpack-plugin');  //这里要注意下，这是webpack v4.32.1版本以上(包括v4.32.1) , CleanWabpckPlugin的引入方式。如引入错误，会提示  CleanWebpackPlugin is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+   const CleanWebpackPlugin = require('clean-webpack-plugin');   // 这是webpack v4.32.1版本以下的 引入方式。</span></span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        module: &#123;&#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new HtmlWebpackPlugin(&#123;</span><br><span class="line">                title: 'mywebpackdemo',      //设置文档标题</span><br><span class="line">                filename: 'index.html',      //设置生成html文件的名字</span><br><span class="line">                template: './index.html'     // 如果想要生成的文件是你自己写的，就把你写的文件路径写在这，作为模板。这里我将根目录下的index.html作为模板</span><br><span class="line">            &#125;),</span><br><span class="line"><span class="addition">+           new CleanWebpackPlugin(),</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了说明CleanWebpackPlugin 的作用，可以在dist里面多建几个文件</p><p> <br>然后打开命令行终端, 输入 打包命令： npm run dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打包完成后，可以看看刚才新建的文件是否都被删除了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;html-webpack-plugin&lt;/li&gt;
&lt;li&gt;clean-webpack-plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面我们打开文件一直用的自己写的入口文件 index.html 。在实际的开发生产过程中。需要把入口文件以及打包后的文件上传到服务器。
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack样式打包-3</title>
    <link href="http://yoursite.com/2019/06/04/webpack%E6%A0%B7%E5%BC%8F%E6%89%93%E5%8C%85-3/"/>
    <id>http://yoursite.com/2019/06/04/webpack样式打包-3/</id>
    <published>2019-06-04T04:48:50.000Z</published>
    <updated>2019-06-27T02:59:36.523Z</updated>
    
    <content type="html"><![CDATA[<p>这篇的重点：</p><ul><li>style-loader</li><li>css-loader</li><li>sass-loader</li><li>postcss-loader</li><li>添加厂商前缀</li></ul><p>写前端项目时，少不了写样式。这篇就看看css打包是如何配置的</p><h3 id="1-loader的执行顺序：从下到上-从右到左"><a class="header-anchor" href="#1-loader的执行顺序：从下到上-从右到左">¶</a>1.loader的执行顺序：从下到上，从右到左</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="addition">+   test: /\.css$/,</span></span><br><span class="line"><span class="addition">+      use: [</span></span><br><span class="line"><span class="addition">+         'style-loader',</span></span><br><span class="line"><span class="addition">+         'css-loader',</span></span><br><span class="line"><span class="addition">+         'sass-loader',</span></span><br><span class="line"><span class="addition">+         'less-loader',</span></span><br><span class="line"><span class="addition">+         'postcss-loader',</span></span><br><span class="line"><span class="addition">+      ]</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-css打包"><a class="header-anchor" href="#2-css打包">¶</a>2.css打包</h3><p>先来看下项目结构, 新建css文件以及index.css文件。我们需要的效果是将图片变小，并且偏移：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- images</span><br><span class="line">    |    |- 1.jpg</span><br><span class="line"><span class="addition">+    |- css      </span></span><br><span class="line"><span class="addition">+    |    |- index.css   //添加的样式文件</span></span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p><strong>index.css</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+.test &#123;</span></span><br><span class="line"><span class="addition">+    width: 200px;</span></span><br><span class="line"><span class="addition">+    height: 200px;</span></span><br><span class="line"><span class="addition">+    transform: translate(100px, 100px);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import yimg from "./images/1.jpg"</span><br><span class="line"><span class="addition">+import index from "./css/index.css"     // index.js引入样式文件</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line">var image = new Image();</span><br><span class="line">image.src = yimg;</span><br><span class="line"><span class="addition">+image.classList.add('test');     // 这里的test是index.css里面的类名</span></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">root.append(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改webpack配置 <strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line"><span class="addition">+        &#125;,&#123;</span></span><br><span class="line"><span class="addition">+            test: /\.css$/,</span></span><br><span class="line"><span class="addition">+            use: [</span></span><br><span class="line"><span class="addition">+                'style-loader',</span></span><br><span class="line"><span class="addition">+                'css-loader',</span></span><br><span class="line"><span class="addition">+            ]</span></span><br><span class="line"><span class="addition">+        &#125;]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<kbd>style-loader</kbd>      <kbd>css-loader</kbd>     <br>css-loader可以识别并打包css文件。style-loader 是将处理的样式挂载到页面上<br>文档移步这里： <a href="https://www.webpackjs.com/loaders/style-loader/" target="_blank" rel="noopener"><font color="#42A8E1">style-loader</font></a>      <a href="https://www.webpackjs.com/loaders/css-loader/" target="_blank" rel="noopener"><font color="#42A8E1">css-loader</font></a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开index.html就可以看到css已经有效果了<br><img src="/images/webpack/7.png" alt="Alt"></p><h3 id="3-scss打包"><a class="header-anchor" href="#3-scss打包">¶</a>3.scss打包</h3><p>效果是将scss文件进行编译打包，是图片顺时针转70度，修改文件目录结构，添加sass文件夹以及index.scss文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- images</span><br><span class="line">    |    |- 1.jpg</span><br><span class="line">    |- css      </span><br><span class="line">    |    |- index.css   </span><br><span class="line"><span class="addition">+    |- scss      </span></span><br><span class="line"><span class="addition">+    |    |- index.scss   //添加的scss文件</span></span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p><strong>index.scss</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+body &#123;</span></span><br><span class="line"><span class="addition">+    .img &#123;</span></span><br><span class="line"><span class="addition">+        margin-top: 300px;</span></span><br><span class="line"><span class="addition">+        width: 200px;</span></span><br><span class="line"><span class="addition">+        height: 200px;</span></span><br><span class="line"><span class="addition">+        transform: rotate(70deg);</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import yimg from "./images/1.jpg"</span><br><span class="line">import index from "./css/index.css"    </span><br><span class="line"><span class="addition">+import avatar from "./sass/index.scss"    //引入index.scss文件</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line">var image = new Image();</span><br><span class="line">image.src = yimg;</span><br><span class="line"><span class="addition">+//image.classList.add('test');     </span></span><br><span class="line"><span class="addition">+    image.classList.add('img');    //将img类赋值到src上面</span></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">root.append(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改webpack配置 <strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                'css-loader',</span><br><span class="line">            ]</span><br><span class="line"><span class="addition">+        &#125;,&#123;</span></span><br><span class="line"><span class="addition">+            test: /\.scss/,</span></span><br><span class="line"><span class="addition">+            use: [</span></span><br><span class="line"><span class="addition">+                'style-loader',</span></span><br><span class="line"><span class="addition">+                 &#123;</span></span><br><span class="line"><span class="addition">+                    loader: 'css-loader',      //css-loader</span></span><br><span class="line"><span class="addition">+                    options: &#123; </span></span><br><span class="line"><span class="addition">+                        importLoader: 2        //当index.scss文件中有导入 @import b.scss  文件时，需要重新加载css-loader的前面的loader插件</span></span><br><span class="line"><span class="addition">+                    &#125;</span></span><br><span class="line"><span class="addition">+                 &#125;</span></span><br><span class="line"><span class="addition">+                'scss-loader'      //将scss语法编译成css语法</span></span><br><span class="line"><span class="addition">+            ]</span></span><br><span class="line"><span class="addition">+         &#125;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<kbd>sass-loader</kbd>     <br>sass-loader将scss文件转译成css文件以让浏览器识别。<br>文档移步这里： <a href="https://www.webpackjs.com/loaders/sass-loader/" target="_blank" rel="noopener"><font color="#42A8E1">sass-loader</font></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><p> </p><p>安装完成后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开index.html就可以看到scss已经被成功的编译打包成css语法了<br><img src="/images/webpack/8.png" alt="Alt"></p><h3 id="4-postcss-loader-添加厂商前缀"><a class="header-anchor" href="#4-postcss-loader-添加厂商前缀">¶</a>4.postcss-loader 添加厂商前缀</h3><p>一般写样式的时候，我们为了兼容主流浏览器，都会在css3的新属性前加上厂商前缀。当项目变的很大的时候，手动去写就变的非常麻烦了。那么postcss-loader就是帮助我们加自动的添加前缀的。</p><p>新建postcss.config.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+module.exports = &#123;</span></span><br><span class="line"><span class="addition">+    plugins: [</span></span><br><span class="line"><span class="addition">+      require('autoprefixer')</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br></pre></td></tr></table></figure><p>修改webpack配置 <strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                'css-loader',</span><br><span class="line"><span class="addition">+               'postcss-loader',  </span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                'css-loader',</span><br><span class="line"><span class="addition">+               'postcss-loader',  </span></span><br><span class="line">           &#125;,&#123;</span><br><span class="line">               test: /\.scss/,</span><br><span class="line">               use: [</span><br><span class="line">                 'style-loader',</span><br><span class="line">                   &#123;</span><br><span class="line">                    loader: 'css-loader',      </span><br><span class="line">                    options: &#123; </span><br><span class="line">                        importLoader: 2        </span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                'scss-loader',</span><br><span class="line"><span class="addition">+               'postcss-loader',      </span></span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<kbd>postcss-loader</kbd>     <br>postcss-loader自动添加厂商前缀。<br>文档移步这里： <a href="https://www.webpackjs.com/loaders/postcss-loader/" target="_blank" rel="noopener"><font color="#42A8E1">postcss-loader</font></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader</span><br></pre></td></tr></table></figure><p>安装 autoprefixer 插件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开index.html就可以看到transform前面已经自动加上了-webkit-<br><img src="/images/webpack/9.png" alt="Alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇的重点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;style-loader&lt;/li&gt;
&lt;li&gt;css-loader&lt;/li&gt;
&lt;li&gt;sass-loader&lt;/li&gt;
&lt;li&gt;postcss-loader&lt;/li&gt;
&lt;li&gt;添加厂商前缀&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写前端项目时，少不
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack图片打包-2</title>
    <link href="http://yoursite.com/2019/06/03/webpack%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85-2/"/>
    <id>http://yoursite.com/2019/06/03/webpack图片打包-2/</id>
    <published>2019-06-03T02:35:42.000Z</published>
    <updated>2019-06-04T09:43:23.090Z</updated>
    
    <content type="html"><![CDATA[<p>webpack只认识js文件和JSON文件，所以打包的时候默认是会对这两种类型的文件进行打包。但实际的项目中，除了js和JSON，还有css， img等文件。<br>这些文件就需要依赖loader来进行编译然后才能被浏览器识别并渲染出来。loader就是文件打包的一种解决方案。</p><p>下面我们要认识的是：</p><pre><code>图片打包css打包</code></pre><p>先来说图片打包，现在看下目录结构，新建images文件夹，随便下载一张图片放进去：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line"><span class="addition">+    |- images</span></span><br><span class="line"><span class="addition">+        |- 1.jpg</span></span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>在index.js文件中添加如下内容，目的是将图片引入进来<br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import yimg from "./images/1.jpg"   //先将js引入进来</span></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line"><span class="addition">+var image = new Image();    //创建img标签</span></span><br><span class="line"><span class="addition">+image.src = yimg;           // 将img的src属性设置成我们引入的图片</span></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line"><span class="addition">+root.append(image);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于webpack默认不认识以jpg/png 这些后缀名结尾的文件，所以要在webpack.config.js中配置loader。修改webpack.config.js文件，<br>这里处理图片文件用file-loader。</p><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    module: &#123;      //是配置我们的模块规则</span></span><br><span class="line"><span class="addition">+       rules: [&#123;    //rules里面可以配置各种文件处理的规则</span></span><br><span class="line"><span class="addition">+           test: /\.jpg|png|jpeg|gif$/,     //匹配以jpg|png|jpeg|gif结尾的文件</span></span><br><span class="line"><span class="addition">+           use: [&#123;             //使用的loader</span></span><br><span class="line"><span class="addition">+                   loader: 'file-loader',    //这里用file-loader来处理图片</span></span><br><span class="line"><span class="addition">+                   options: &#123;                //options里面可以配置详细的处理信息</span></span><br><span class="line"><span class="addition">+                       name: '[name].[ext]?[hash]',     //  打包文件名</span></span><br><span class="line"><span class="addition">+                       publicPath: './dist/img',        //  打包的公共路径(ps:默认是在output.path下面)</span></span><br><span class="line"><span class="addition">+                       outputPath: 'img',               //  打包的文件放在img文件夹内。比如默认打包出来是在 dist/1.img。设置outpurpath就是dist/img/1.jpg</span></span><br><span class="line"><span class="addition">+                   &#125;</span></span><br><span class="line"><span class="addition">+               &#125;,</span></span><br><span class="line"><span class="addition">+           ]</span></span><br><span class="line"><span class="addition">+       &#125;]</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.webpackjs.com/loaders/file-loader/" target="_blank" rel="noopener"><font color="#42A8E1">file-loader</font></a>配置完成后，我们需要安装file-loader,  npm install file-loader --save-dev 或者 npm install file-loader -D 都可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure><p>安装完成之后，就可以在命令行输入我们之前配置好的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>这是打包完成目录及效果, 这个时候img被单独打包成一个文件：<br><img src="/images/webpack/3.png" alt="Alt"><br><img src="/images/webpack/4.png" alt="Alt"></p><p><strong>file-loader 打包的图片会被直接img引用，页面渲染的时候会发送请求。如果图片很小。页面中又有很多的时候时候，是很浪费下载通道的。<br>这个时候我们可以用<a href="https://www.webpackjs.com/loaders/url-loader/" target="_blank" rel="noopener"><font color="#42A8E1">url-loader</font></a>。<br><font color="#FB3838">url-loader: url-loader 功能类似于 file-loader，但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL。</font></strong></p><p>现在我们改下配置：<br><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;      //是配置我们的模块规则</span><br><span class="line">       rules: [&#123;    //rules里面可以配置各种文件处理的规则</span><br><span class="line">           test: /\.jpg|png|jpeg|gif$/,     //匹配以jpg|png|jpeg|gif结尾的文件</span><br><span class="line">           use: [&#123;             //使用的loader</span><br><span class="line"><span class="addition">+                   loader: 'url-loader',    //这里用url-loader来处理图片</span></span><br><span class="line">                    options: &#123;                </span><br><span class="line">                        name: '[name].[ext]?[hash]',     </span><br><span class="line">                        publicPath: './dist/img',        </span><br><span class="line">                        outputPath: 'img',               </span><br><span class="line"><span class="addition">+                       limit: 204800,                   //  当打包的图片文件小于204800Byte时, 将图片编译成base64的形式，进行打包。如果大于204800Byte时，则使用file-loader进行打包</span></span><br><span class="line">                    &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">           ]</span><br><span class="line">       &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们看在使用url-loader打包的效果，我们用的图片是45830Byte。所以图片会被打包进bundle.js里，不会被单独的打包成一个文件。在页面上我们可以看到img的路径是一个base64的字符串：<br><img src="/images/webpack/5.png" alt="Alt"><br><img src="/images/webpack/6.png" alt="Alt"></p><p>图片打包常用的就file-loader 和 url-loader 了，更多的可以查文档:<a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener"><font color="#42A8E1">https://www.webpackjs.com/loaders/</font></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack只认识js文件和JSON文件，所以打包的时候默认是会对这两种类型的文件进行打包。但实际的项目中，除了js和JSON，还有css， img等文件。&lt;br&gt;
这些文件就需要依赖loader来进行编译然后才能被浏览器识别并渲染出来。loader就是文件打包的一种解决
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础配置-1</title>
    <link href="http://yoursite.com/2019/05/30/webpack%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE-1/"/>
    <id>http://yoursite.com/2019/05/30/webpack基础配置-1/</id>
    <published>2019-05-30T04:46:36.000Z</published>
    <updated>2019-06-03T02:37:19.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-webpack配置"><a class="header-anchor" href="#1-webpack配置">¶</a>1.webpack配置</h3><p>打开我们在上文中操作的文件夹，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>为了后期文件便于管理，并且webpack的默认配置的打包入口文件就是src文件夹下的index.js文件。现在我们调整下文件结构。将index.js放在src目录下。<br>调整完成后应该是下面这样：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line"><span class="addition">+  |- index.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>现在我们运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>这块webpack后面没有写入口文件，所以用的webpack默认的打包配置。</p><h3 id="2-现在我们手写下基础配置-在根目录下新建webpack-config-js配置文件-写入下面内容"><a class="header-anchor" href="#2-现在我们手写下基础配置-在根目录下新建webpack-config-js配置文件-写入下面内容">¶</a>2.现在我们手写下基础配置，在根目录下新建webpack.config.js配置文件,写入下面内容</h3><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引入node中的path模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;     <span class="comment">//将整个模块导出</span></span><br><span class="line">    entry: &#123;           <span class="comment">//入口文件</span></span><br><span class="line">        main: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;          <span class="comment">//打包输出路径</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,      <span class="comment">//打包输出的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)    <span class="comment">//打包生成的文件夹，path必须是绝对路径,  __dirname返回当前文件的绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack webpack.config.js</span><br></pre></td></tr></table></figure><p>Entrypoint main = bundle.js说明我们的配置生效了<br><img src="/images/webpack/1.png" alt="Alt"></p><h3 id="3-配置运行命令"><a class="header-anchor" href="#3-配置运行命令">¶</a>3.配置运行命令</h3><p>npx webpack webpack.config.js  每次编译需要输入这么一长串。现在我们可以优化下命令<br>打开webpack.json，自定义不同mode下的打包命令，加上下面的两条命令，就ok了</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+    "dev": "webpack --mode=development",</span></span><br><span class="line"><span class="addition">+    "prod": "webpack --mode=production"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "webpack": "^4.32.2",</span><br><span class="line">    "webpack-cli": "^3.3.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>下面的界面说明我们打包成功了。同样也可以运行 npm run prod,打包生产环境的代码。(ps: dev环境下打包的代码不会被压缩。prod环境下打包的代码会被压缩)<br><img src="/images/webpack/2.png" alt="Alt"></p><p>以上我们就建好了基础配置，更多的配置可以查阅官方文档：<br><a href="https://webpack.docschina.org/api/cli/#%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><font color="#42A8E1">webpack配置文档</font></a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-webpack配置&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-webpack配置&quot;&gt;¶&lt;/a&gt;1.webpack配置&lt;/h3&gt;
&lt;p&gt;打开我们在上文中操作的文件夹，&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础</title>
    <link href="http://yoursite.com/2019/05/29/webpack%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/05/29/webpack安装/</id>
    <published>2019-05-29T04:26:26.000Z</published>
    <updated>2019-05-30T07:31:27.525Z</updated>
    
    <content type="html"><![CDATA[<p>从这篇开始，会不定期更新webpack教程。希望能帮到在路上的小伙伴<br><a href="https://webpack.js.org/" target="_blank" rel="noopener"><font color="#42A8E1">webpack文档</font></a>.</p><p>准备：1.安装node.js环境并配置好</p><h3 id="安装webpack"><a class="header-anchor" href="#安装webpack">¶</a>安装webpack</h3><p>tip: 安装之前一定要先安装node <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener"><font color="#42A8E1">node官网</font></a>.</p><h5 id="1-新建文件夹并进入"><a class="header-anchor" href="#1-新建文件夹并进入">¶</a>1. 新建文件夹并进入</h5><p>打开命令框工具，输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>现在文件夹下会生成一个package.json文件，这个文件包含项目基本信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// &lt;!-- package.json --&gt;</span><br><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",  // 项目名称</span><br><span class="line">  "version": "1.0.0",     // 项目版本</span><br><span class="line">  "description": "",      // 描述</span><br><span class="line">  "main": "index.js",     // 执行的入口文件</span><br><span class="line">  "scripts": &#123;            // 配置项目命令</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],       // 关键字</span><br><span class="line">  "author": "",         // 作者(这里指开发者)</span><br><span class="line">  "license": "ISC",     // 标准(这个默认就ok)</span><br><span class="line">  "dependencies": &#123;     // 生产环境需要的依赖包</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  "devDependencies": &#123;  // 本地开发需要的依赖</span><br><span class="line">    "webpack": "^4.32.2",   // 安装包</span><br><span class="line">    "webpack-cli": "^3.3.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装webpack,2种方法，一种是全局安装(通常我们不建议全局安装，因为每个项目需要的webpack版本可能会有不同，这里我们只说项目内安装)，<br>一种是项目内安装。</p><h5 id="项目内安装"><a class="header-anchor" href="#项目内安装">¶</a>项目内安装</h5><p>npm install webpack webpack-cli --save-dev 等同于<br>npm install webpack webpack-cli -D</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，输入 npx webpack -v 出现版本号说明安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack -v</span><br></pre></td></tr></table></figure><h3 id="现在新建文件-来体验下文件打包是什么样的"><a class="header-anchor" href="#现在新建文件-来体验下文件打包是什么样的">¶</a>现在新建文件，来体验下文件打包是什么样的</h3><p>在文件夹的根目录下新建 index.html 文件，以及src文件夹。在src文件夹下面新建 index.js文件，并将下面相应的代码复制</p><h6 id="index-html"><a class="header-anchor" href="#index-html">¶</a>index.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>欢迎来到蔓羊博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的dist 以及main.js 会在后面操作打包生成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="index-js"><a class="header-anchor" href="#index-js">¶</a>index.js</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">dom.innerHTML = <span class="string">'这是我的测试博客'</span>;</span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在项目目录应该是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>建好了之后，打开git命令行工具，输入下面的命令。这个时候根目录下面会生成一个dist文件夹(ps:也就是通常所说的打包之后的文件)bi<br>这个时候可以在浏览器打开index.html,显示正常，说明打包成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack index.js</span><br></pre></td></tr></table></figure><p>npx：是webpack内置的打包命令。打包配置文件也是webpack默认的打包配置</p><p>以上就是webpack入门，想了解更多，请移步下篇文章 😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从这篇开始，会不定期更新webpack教程。希望能帮到在路上的小伙伴&lt;br&gt;
&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font color=&quot;#42A8E1&quot;&gt;webpack文档&lt;/
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>无插件上拉加载</title>
    <link href="http://yoursite.com/2019/03/27/%E6%97%A0%E6%8F%92%E4%BB%B6%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/03/27/无插件上拉加载/</id>
    <published>2019-03-27T02:19:27.000Z</published>
    <updated>2019-03-27T03:51:28.987Z</updated>
    
    <content type="html"><![CDATA[<p>在写这篇文档之前，自己也写过移动端的上拉加载，不过一直以来都是用插件。<br>这次有时间吧原理好好梳理下；</p><h3 id="原理："><a class="header-anchor" href="#原理：">¶</a>原理：</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190327103242.jpg" alt="提示图片"></p><p><strong>浏览器内容高度(随内容多少变化)：</strong> document.documentelement.scrollHeight(ie的scrollHeight为document.body.scrollHeight)<br><strong>滚动条的高度：</strong> dooument.documentelement.scrollTop(ie的scrollTop为document.body.scrollTop)<br><strong>设备网页的可见高度(很多人说是设备的高度，自己斟酌)：</strong> widnow.screen.height</p><p>所以，当document.documentelement.scrollHeight = dooument.documentelement.scrollTop + widnow.screen.height时，就是滑到底部，需要请求下一页数据的时候</p><p>下面是核心代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> screenHeight = <span class="built_in">window</span>.screen.height;</span><br><span class="line"><span class="keyword">var</span> scrollHeight = <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面的10是在滑动在距离底部10px的时候,触发下一页数据请求.可自行调节</span></span><br><span class="line"><span class="keyword">if</span>(scrollHeight - (screenHeight + scrollTop) &lt; <span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面就是请求下一页数据的逻辑了，自行发挥</span></span><br><span class="line"> <span class="keyword">var</span> htmlt = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"> htmlt = htmlt + <span class="string">'&lt;p&gt;'</span> + arr[i] + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> box = $(<span class="string">'.box'</span>).html()</span><br><span class="line"> $(<span class="string">'.box'</span>).html(box + htmlt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好用的话记得star呀~~😛<br>[上拉滚动 demo git地址]<a href="https://github.com/yagmdream/scroll" target="_blank" rel="noopener">https://github.com/yagmdream/scroll</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写这篇文档之前，自己也写过移动端的上拉加载，不过一直以来都是用插件。&lt;br&gt;
这次有时间吧原理好好梳理下；&lt;/p&gt;
&lt;h3 id=&quot;原理：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#原理：&quot;&gt;¶&lt;/a&gt;原理：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
