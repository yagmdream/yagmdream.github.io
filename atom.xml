<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔓羊</title>
  
  <subtitle>梦想还是要有的，万一见鬼了呢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-10T02:10:48.232Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yagmdream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack处理ES6语法-7</title>
    <link href="http://yoursite.com/2019/07/03/webpack%E5%A4%84%E7%90%86ES6%E8%AF%AD%E6%B3%95-7/"/>
    <id>http://yoursite.com/2019/07/03/webpack处理ES6语法-7/</id>
    <published>2019-07-03T03:07:44.000Z</published>
    <updated>2019-07-10T02:10:48.232Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，ES6语法目前是不能被大部分主流浏览器所识别的。我们项目中所用的框架都是帮我们做好了ES6转ES5。所以我们可以直接使用ES6。<br>那么我们自己去配置项目的时候语法怎么处理呢。下面我们就来看下语法转换。</p><ul><li><strong><a href="https://babeljs.io/setup#installation" target="_blank" rel="noopener"><font color="#42A8E1">babel官网</font></a></strong></li></ul><h3 id="1-安装babel"><a class="header-anchor" href="#1-安装babel">¶</a>1.安装babel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core</span><br></pre></td></tr></table></figure><p> <br><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><br><span class="line">const webpack = require('webpack');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, 'dist'),</span><br><span class="line">        clientLogLevel: 'info',</span><br><span class="line">        open: true,</span><br><span class="line">        host: 'localhost',</span><br><span class="line">        port: '9090',</span><br><span class="line">        inline: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            '/': &#123;</span><br><span class="line">                target: 'http://yagmblog.com/',</span><br><span class="line">            &#125;,</span><br><span class="line">            '/upload': &#123;</span><br><span class="line">                target: 'http://yagmblog.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        hot: true,</span><br><span class="line">        hotOnly: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line"><span class="addition">+            test: /\.js$/, </span></span><br><span class="line"><span class="addition">+            exclude: /(node_modules|bower_components|lib)/,</span></span><br><span class="line"><span class="addition">+            loader: 'babel-loader'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                "style-loader",</span><br><span class="line">                "css-loader",</span><br><span class="line">                'postcss-loader',</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: 'css-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: 2,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                'sass-loader',</span><br><span class="line">                'postcss-loader',</span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new webpack.HotModuleReplacementPlugin()</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '/',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>文件结构</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- assets</span><br><span class="line">        |- images</span><br><span class="line">        |    |- 1.jpg</span><br><span class="line">        |- css      </span><br><span class="line">        |    |- index.css   </span><br><span class="line">        |- scss      </span><br><span class="line">        |    |- index.scss   </span><br><span class="line">        |- iconfont</span><br><span class="line">             |- demo_index.html</span><br><span class="line">             |- demo.css</span><br><span class="line">             |- iconfont.css</span><br><span class="line">             |- iconfont.eot</span><br><span class="line">             |- iconfont.svg</span><br><span class="line">             |- iconfont.js</span><br><span class="line">             |- iconfont.ttf</span><br><span class="line">             |- iconfont.woff</span><br><span class="line">             |- iconfont.woff2</span><br><span class="line">    |- index.js</span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line"><span class="addition">+ |- .babelrc</span></span><br></pre></td></tr></table></figure><p> <br><strong>安装@babel/preset-env</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure><p> <br><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  "presets": ["@babel/preset-env"]</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p> <br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;),</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.map(val =&gt; &#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <br><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"><span class="addition">+    "dev": "webpack --mode development --env development  --colors",</span></span><br><span class="line">    "prod": "webpack --mode production --env production --colors",</span><br><span class="line">    "start": "webpack-dev-server --colors"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> <br>打包完成后我们能看到dist目录下面的main.js, 最下面我们可以找到下面的这段代码(也可以直接搜索index.js)。 const被编译成var，箭头语法也被编译成function。已经实现了ES6到ES5的转换。但这只转换了一部分。在一些低版本浏览器中promise和map依然识别不了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">"./src/index.js"</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/*! no static exports found */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"// import \"./assets/css/index.css\"\nvar arr = [new Promise(function () &#123;&#125;), new Promise(function () &#123;&#125;)];\narr.map(function (val) &#123;\n  console.log(val);\n&#125;);\n\n//# sourceURL=webpack:///./src/index.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br></pre></td></tr></table></figure><p> </p><h3 id="2-兼容低版本浏览器"><a class="header-anchor" href="#2-兼容低版本浏览器">¶</a>2.兼容低版本浏览器</h3><p><strong>安装@babel/polyfill</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure><p> <br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import "@babel/polyfill"</span></span><br><span class="line"></span><br><span class="line">const arr = [</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;),</span><br><span class="line">    new Promise(() =&gt; &#123;&#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.map(val =&gt; &#123;</span><br><span class="line">    console.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/15.png" alt="Alt"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="string">"./node_modules/@babel/polyfill/lib/index.js"</span>:</span><br><span class="line"><span class="comment">/*!***************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/@babel/polyfill/lib/index.js ***!</span></span><br><span class="line"><span class="comment">  \***************************************************/</span></span><br><span class="line"><span class="comment">/*! no static exports found */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"\n\n__webpack_require__(/*! ./noConflict */ \"./node_modules/@babel/polyfill/lib/noConflict.js\");\n\nvar _global = _interopRequireDefault(__webpack_require__(/*! core-js/library/fn/global */ \"./node_modules/core-js/library/fn/global.js\"));\n\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;\n\nif (_global.default._babelPolyfill &amp;&amp; typeof console !== \"undefined\" &amp;&amp; console.warn) &#123;\n  console.warn(\"@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended \" + \"and may have consequences if different versions of the polyfills are applied sequentially. \" + \"If you do need to load the polyfill more than once, use @babel/polyfill/noConflict \" + \"instead to bypass the warning.\");\n&#125;\n\n_global.default._babelPolyfill = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/polyfill/lib/index.js?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br></pre></td></tr></table></figure><p>从打包的main.js中可以看到，Promise和map方法  @babel/polyfill 已经帮我们做了实现，但是打包文件突然增大到400多kb。是因为main.js文件将整个<br>polyfill都打包进来。但是我们想要的是我们在index.js文件用到的方法帮我们做打包处理，没用到的方法就不需要打包进main.js</p><p> </p><h3 id="3-现在我们配置让它只打包我们用到的方法"><a class="header-anchor" href="#3-现在我们配置让它只打包我们用到的方法">¶</a>3.现在我们配置让它只打包我们用到的方法</h3><p><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+"useBuiltIns": "usage",</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/16.png" alt="Alt"><br>当我们配置了.babelrc的 “useBuiltIns”: “usage”  再次打包,发现我们的打包文件已经到90多kb了。“useBuiltIns”: &quot;usage&quot;的特性就是当polyfill低版本的浏览器添加一些特性的时候，不是把所有的特性都加进去。而是我们用到什么才去添加什么。</p><p> </p><h3 id="4-设置浏览器版本"><a class="header-anchor" href="#4-设置浏览器版本">¶</a>4.设置浏览器版本</h3><p><strong>.babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line">&#123;</span><br><span class="line"><span class="addition">+"targets": &#123;</span></span><br><span class="line"><span class="addition">+"edge": "17",</span></span><br><span class="line"><span class="addition">+"firefox": "60",</span></span><br><span class="line"><span class="addition">+"safari": "11.1",</span></span><br><span class="line"><span class="addition">+"chrome": "67"</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line">"useBuiltIns": "usage",</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“chrome”: “67” 指编译的代码要运行在67版本的chrome浏览器上， 如果chrome67版本的chrome支持promise语法，则不转换，否则就转换。<br> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p> </p><h3 id="5-插件开发"><a class="header-anchor" href="#5-插件开发">¶</a>5.插件开发</h3><p>平时开发直接引入就可以用了。但如果是开发插件，上面那种promise 全局引入会污染全局环境。下面用插件安装的方式来引入</p><p><strong>安装pluginTransformRuntime</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br><span class="line">npm install --save-dev @babel/runtime</span><br><span class="line">npm install --save-dev @babel/runtime-corejs2</span><br></pre></td></tr></table></figure><p> <br><strong>babelrc</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"presets": [</span><br><span class="line">[</span><br><span class="line">"@babel/preset-env",</span><br><span class="line">&#123;</span><br><span class="line">"targets": &#123;</span><br><span class="line">"edge": "17",</span><br><span class="line">"firefox": "60",</span><br><span class="line">"safari": "11.1",</span><br><span class="line">"chrome": "67"</span><br><span class="line">&#125;,</span><br><span class="line">"useBuiltIns": "usage",</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">],</span><br><span class="line"><span class="addition">+"plugins": [</span></span><br><span class="line"><span class="addition">+[</span></span><br><span class="line"><span class="addition">+    "@babel/plugin-transform-runtime",</span></span><br><span class="line"><span class="addition">+    &#123;</span></span><br><span class="line"><span class="addition">+      "absoluteRuntime": false,</span></span><br><span class="line"><span class="addition">+      "corejs": 2,</span></span><br><span class="line"><span class="addition">+      "helpers": true,</span></span><br><span class="line"><span class="addition">+      "regenerator": true,</span></span><br><span class="line"><span class="addition">+      "useESModules": false</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+]</span></span><br><span class="line"><span class="addition">+]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br><strong>执行我们开发环境的打包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打包完成之后，可以看到 promise和map依然会帮我们进行处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道，ES6语法目前是不能被大部分主流浏览器所识别的。我们项目中所用的框架都是帮我们做好了ES6转ES5。所以我们可以直接使用ES6。&lt;br&gt;
那么我们自己去配置项目的时候语法怎么处理呢。下面我们就来看下语法转换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-devServer开发配置-6</title>
    <link href="http://yoursite.com/2019/06/28/webpack-devServer%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE-6/"/>
    <id>http://yoursite.com/2019/06/28/webpack-devServer开发配置-6/</id>
    <published>2019-06-28T06:54:08.000Z</published>
    <updated>2019-07-01T08:35:52.010Z</updated>
    
    <content type="html"><![CDATA[<p>webpack-dev-server是一个快速搭建本地运行环境的工具，实际开发中我们需要请求接口调用数据。在我们以前的打包文件中，直接在浏览器打开是file协议，而file是无法调取接口的，webpack-dev-server可以帮我们将file协议改成http协议。</p><p>webpack-dev-server 实现以下功能：</p><ul><li>自动打开浏览器</li><li>调试接口</li><li>实时刷新</li><li>热更新</li><li>使用代理</li></ul><h3 id="1-安装-webpack-dev-server-插件-自动打开浏览器-调试接口-实时刷新-使用代理"><a class="header-anchor" href="#1-安装-webpack-dev-server-插件-自动打开浏览器-调试接口-实时刷新-使用代理">¶</a>1.安装 webpack-dev-server 插件 (自动打开浏览器 | 调试接口 | 实时刷新 | 使用代理)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    devServer: &#123;      //添加devServer配置</span></span><br><span class="line"><span class="addition">+        contentBase: path.join(__dirname, 'dist'),   // 设置文件的根目录</span></span><br><span class="line"><span class="addition">+        clientLogLevel: 'info',      // 在开发工具(DevTools)的控制台(console)将显示消息，如：在重新加载之前，在一个错误之前，或者模块热替换(Hot Module Replacement)启用</span></span><br><span class="line"><span class="addition">+        open: true,        // 编译完成后自动帮我们打开默认浏览器</span></span><br><span class="line"><span class="addition">+        host: 'localhost',   // 默认为localhost, 如果在局域网内想让别人也可以访问，可以设置成你的本机地址，比如：192.168.0.120</span></span><br><span class="line"><span class="addition">+        port: '9090',       // 页面访问的端口</span></span><br><span class="line"><span class="addition">+        inline: true,       // 实时更新</span></span><br><span class="line"><span class="addition">+        proxy: &#123;            //设置代理</span></span><br><span class="line"><span class="addition">+            '/api': &#123;            // 如果请求到 /api/users , 现在会被代理到请求 http://yagmblog.com/api/users , /api会被target替换。如果不想始终传递 /api, 则需要重写路径。 </span></span><br><span class="line"><span class="addition">+                target: 'http://yagmblog.com/',</span></span><br><span class="line"><span class="addition">+                pathRewrite:  &#123;               //重写路径</span></span><br><span class="line"><span class="addition">+                    '/api': ''</span></span><br><span class="line"><span class="addition">+                &#125;</span></span><br><span class="line"><span class="addition">+            &#125;,</span></span><br><span class="line"><span class="addition">+            '/upload': &#123;        //配置图片上传代理</span></span><br><span class="line"><span class="addition">+                target: 'http://yagmblog.com'</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+        &#125;,</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                "style-loader",</span><br><span class="line">                "css-loader",</span><br><span class="line">                'postcss-loader',</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: 'css-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: 2,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                'sass-loader',</span><br><span class="line">                'postcss-loader',</span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '/',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "dev": "webpack --mode development --env development --watch  --colors --progress",</span><br><span class="line">    "prod": "webpack --mode production --env production --colors --progress",</span><br><span class="line"><span class="addition">+    "start": "webpack-dev-server --colors --progress", //配置本地开发运行命令 --colors 对编译提示信息添加颜色，--progress显示编译进度</span></span><br><span class="line">    "server": "node server.js  "</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "autoprefixer": "^9.5.1",</span><br><span class="line">    "clean-webpack-plugin": "^3.0.0",</span><br><span class="line">    "css-loader": "^2.1.1",</span><br><span class="line">    "express": "^4.17.1",</span><br><span class="line">    "extract-text-webpack-plugin": "^4.0.0-beta.0",</span><br><span class="line">    "file-loader": "^3.0.1",</span><br><span class="line">    "html-webpack-plugin": "^3.2.0",</span><br><span class="line">    "node-sass": "^4.12.0",</span><br><span class="line">    "postcss-loader": "^3.0.0",</span><br><span class="line">    "sass-loader": "^7.1.0",</span><br><span class="line">    "style-loader": "^0.23.1",</span><br><span class="line">    "url-loader": "^1.1.2",</span><br><span class="line">    "webpack": "^4.32.2",</span><br><span class="line">    "webpack-cli": "^3.3.2",</span><br><span class="line">    "webpack-dev-middleware": "^3.7.0",</span><br><span class="line">    "webpack-dev-server": "^3.7.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><h3 id="2-模块热替换-hmr-hotmodulereplacementplugin"><a class="header-anchor" href="#2-模块热替换-hmr-hotmodulereplacementplugin">¶</a>2.模块热替换 HMR( HotModuleReplacementPlugin )</h3><p>现在我们将webpack.config.js进行修改：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line">const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><br><span class="line"><span class="addition">+ const webpack = require('webpack');   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: 'development',</span><br><span class="line">    devtool: 'cheap-module-eval-souce-map',</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, 'dist'),</span><br><span class="line">        clientLogLevel: 'info',</span><br><span class="line">        open: true,</span><br><span class="line">        host: '192.168.0.129',</span><br><span class="line">        port: '9090',</span><br><span class="line">        inline: true,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            '/': &#123;</span><br><span class="line">                target: 'http://yagmblog.com/',</span><br><span class="line">            &#125;,</span><br><span class="line">            '/upload': &#123;</span><br><span class="line">                target: 'http://yagmblog.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="addition">+        hot: true,    // 配置devServe的热更新</span></span><br><span class="line"><span class="addition">+        hotOnly: true,  // 如果更新失败，不做任何操作： 默认刷新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                "style-loader",</span><br><span class="line">                "css-loader",</span><br><span class="line">                'postcss-loader',</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: 'css-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: 2,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                'sass-loader',</span><br><span class="line">                'postcss-loader',</span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.(eot|ttf|svg|woff|woff2)$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'file-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]',</span><br><span class="line">                        publicPath: './iconfont',</span><br><span class="line">                        outputPath: 'iconfont',</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: 'mywebpack',</span><br><span class="line">            // filename: 'bundle.html',</span><br><span class="line">            template: './index.html',</span><br><span class="line">        &#125;),</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line"><span class="addition">+        new webpack.HotModuleReplacementPlugin()      // 热更新插件</span></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // publicPath: '/',   </span><br><span class="line">        filename: '[name].js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;!-- 设置文档标题 --&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="addition">+    &lt;div id="root"&gt;蔓羊博客&lt;/div&gt;</span></span><br><span class="line">    &lt;span class="iconfont icon-changjingguanli"&gt;&lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import "./assets/css/index.css"</span></span><br></pre></td></tr></table></figure><p><strong>index.css</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ div &#123;</span></span><br><span class="line"><span class="addition">+    color: pink;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>写好后，运行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>现在浏览器页面上显示粉色的 蔓羊博客。现在打开index.css文件，将样式改成绿色,保存。：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line"><span class="addition">+    color: green;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回浏览器页面, 现在可以看到控制台doc里面没有请求，也就是没有刷新，但是字体已经变成绿色了.这就是 HotModuleReplacementPlugin 的作用。<br>在不刷新浏览器的情况下可以即时的更改css样式。对于前端写经常写样式的小伙伴来说。真的是非常方便了。但是对js文件就不起作用了。<br><img src="/images/webpack/12.png" alt="Alt"></p><h3 id="2-1-js模块热替换"><a class="header-anchor" href="#2-1-js模块热替换">¶</a>2.1 js模块热替换</h3><p>现在我们在src下面和index.js目录同级新建一个test.js 文件<br><strong>test.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+function add()&#123;</span></span><br><span class="line"><span class="addition">+var div = document.createElement('div');</span></span><br><span class="line"><span class="addition">+    div.innerHTML = 'hello';</span></span><br><span class="line"><span class="addition">+    div.setAttribute('id', 'add')</span></span><br><span class="line"><span class="addition">+document.body.appendChild(div);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ export default add</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  import "./assets/css/index.css"</span><br><span class="line"><span class="addition">+ import add from "./test.js";</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ window.onload = function()&#123;</span></span><br><span class="line"><span class="addition">+add();</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p><strong>上面的代码想实现的是， 创建一个div并设置内容为hello, 然后挂载到body上</strong></p><p>现在重新运行：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>可以看到hello 已经显示在页面上了。<br><img src="/images/webpack/13.png" alt="Alt"></p><p><strong>现在我们将test.js文件内容 hello 999修改为 hello world,保存文件。返回查看浏览器，这里注意，不要刷新浏览器。会发现我们页面上的hello并没有变</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add()&#123;</span><br><span class="line">var div = document.createElement('div');</span><br><span class="line"><span class="addition">+    div.innerHTML = 'hello world';</span></span><br><span class="line">    div.setAttribute('id', 'add')</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default add</span><br></pre></td></tr></table></figure><p><strong>修改index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import "./assets/css/index.css"</span><br><span class="line">import add from "./test.js";</span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+if(module.hot)&#123;     // 相当于监听</span></span><br><span class="line"><span class="addition">+module.hot.accept('./test.js', (() =&gt; &#123;     // 当test.js文件有变动时，先移除原来的dom，在添加新的dom</span></span><br><span class="line"><span class="addition">+document.body.removeChild(document.getElementById('add'));</span></span><br><span class="line"><span class="addition">+add();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+&#125;))</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p><strong>保存后刷新浏览器，我们看到现在页面上显示的是刚才修改过的hello world。现在我们修改test.js文件。将hello world修改成world。保存。返回查看浏览器不要刷新，这个时候页面上的内容已经变成world 。</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add()&#123;</span><br><span class="line">var div = document.createElement('div');</span><br><span class="line"><span class="addition">+    div.innerHTML = 'world';</span></span><br><span class="line">    div.setAttribute('id', 'add')</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default add</span><br></pre></td></tr></table></figure><p>从上面可以知道。当我们使用热更新时，只有样式会被更新。js文件并不会更新。需要js更新，就需要手动编写module.hot。先进行dom移除再添加。但是我们在写项目的时候一般也不会写 module.hot。项目依然可以更新是为什么呢？ 这是由于我们写的项目所用的框架里面已经集成了热更新，比如：vue-loader, react-hot-loader 。所以一般不需要我们自己去写。但是原理我们要明白。其实css文件也不会更新。只不过css-loader里面帮我们集成了更新的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack-dev-server是一个快速搭建本地运行环境的工具，实际开发中我们需要请求接口调用数据。在我们以前的打包文件中，直接在浏览器打开是file协议，而file是无法调取接口的，webpack-dev-server可以帮我们将file协议改成http协议。&lt;/p
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包iconfont-5</title>
    <link href="http://yoursite.com/2019/06/27/webpack%E6%89%93%E5%8C%85iconfont-5/"/>
    <id>http://yoursite.com/2019/06/27/webpack打包iconfont-5/</id>
    <published>2019-06-27T09:31:21.000Z</published>
    <updated>2019-06-28T06:54:25.443Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，避免不了要使用字体图标文件。这里我们看下iconfont打包配置<br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图标</a><br><strong>将下载的iconfont文件放入src/assets/下面的iconfont文件夹下</strong><br>开始之前，为了文件结构清晰，我们将js, css, scss, iconfont文件统一放入assets文件夹，目录如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line"><span class="addition">+    |- assets</span></span><br><span class="line"><span class="addition">+        |- images</span></span><br><span class="line"><span class="addition">+        |    |- 1.jpg</span></span><br><span class="line"><span class="addition">+        |- css      </span></span><br><span class="line"><span class="addition">+        |    |- index.css   </span></span><br><span class="line"><span class="addition">+        |- scss      </span></span><br><span class="line"><span class="addition">+        |    |- index.scss   </span></span><br><span class="line"><span class="addition">+        |- iconfont</span></span><br><span class="line"><span class="addition">+             |- demo_index.html</span></span><br><span class="line"><span class="addition">+             |- demo.css</span></span><br><span class="line"><span class="addition">+             |- iconfont.css</span></span><br><span class="line"><span class="addition">+             |- iconfont.eot</span></span><br><span class="line"><span class="addition">+             |- iconfont.svg</span></span><br><span class="line"><span class="addition">+             |- iconfont.js</span></span><br><span class="line"><span class="addition">+             |- iconfont.ttf</span></span><br><span class="line"><span class="addition">+             |- iconfont.woff</span></span><br><span class="line"><span class="addition">+             |- iconfont.woff2</span></span><br><span class="line"><span class="addition">+    |- index.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.config.js</span><br></pre></td></tr></table></figure><p><strong>index.js 做以下改动</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="addition">+import yimg from "./assets/images/1.jpg"   //更改引入目录</span></span><br><span class="line"><span class="addition">+import test from "./assets/css/index.css"  //更改引入目录</span></span><br><span class="line"><span class="addition">+import avatar from "./assets/sass/index.scss"   //更改引入目录</span></span><br><span class="line"><span class="addition">+import "./assets/iconfont/iconfont.css"   //引入iconfont.css文件</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line">//var image = new Image();</span><br><span class="line">//image.src = yimg;</span><br><span class="line">//image.classList.add('test');</span><br><span class="line">//image.classList.add('img');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">root.append(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html 文件使用字体文件</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;!-- 设置文档标题 --&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id="root"&gt;&lt;/div&gt;</span><br><span class="line"><span class="addition">+    &lt;span class="iconfont icon-changjingguanli"&gt;&lt;/span&gt;</span></span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>webpack.config.js中加入打包处理方案</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">        module: &#123;</span><br><span class="line">            rules: [&#123;</span><br><span class="line">                test: /\.jpg$/,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: 'url-loader',</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: '[name].[ext]?[hash]',</span><br><span class="line">                            publicPath: './dist/img',</span><br><span class="line">                            outputPath: 'img',</span><br><span class="line">                            limit: 204800,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    'css-loader',</span><br><span class="line">                    'postcss-loader',  </span><br><span class="line">                ]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    'css-loader',</span><br><span class="line">                    'postcss-loader',  </span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test: /\.scss/,</span><br><span class="line">                use: [</span><br><span class="line">                    'style-loader',</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: 'css-loader',      </span><br><span class="line">                        options: &#123; </span><br><span class="line">                            importLoader: 2        </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    'scss-loader',</span><br><span class="line">                    'postcss-loader',      </span><br><span class="line">                ]</span><br><span class="line"><span class="addition">+            &#125;,&#123;</span></span><br><span class="line"><span class="addition">+                test: /\.(eot|ttf|svg|woff|woff2)$/,   //匹配iconfont文件</span></span><br><span class="line"><span class="addition">+                use: [</span></span><br><span class="line"><span class="addition">+                    &#123;</span></span><br><span class="line"><span class="addition">+                        loader: 'file-loader',      //使用file-loader处理</span></span><br><span class="line"><span class="addition">+                        options: &#123;                  //配置项</span></span><br><span class="line"><span class="addition">+                            name: '[name].[ext]',   // 打包生成的文件名字</span></span><br><span class="line"><span class="addition">+                            publicPath: './iconfont',   //打包完成后index.html引入的iconfont的路径</span></span><br><span class="line"><span class="addition">+                            outputPath: 'iconfont',    // 打包完成后dist下面放iconfont文件的文件夹</span></span><br><span class="line"><span class="addition">+                        &#125;</span></span><br><span class="line"><span class="addition">+                    &#125;</span></span><br><span class="line"><span class="addition">+                 ],</span></span><br><span class="line"><span class="addition">+           &#125;]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <br>运行打包命令 npm run dev , 可以看到iconfont被成功引入到页面中：<br><img src="/images/webpack/11.png" alt="Alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中，避免不了要使用字体图标文件。这里我们看下iconfont打包配置&lt;br&gt;
&lt;a href=&quot;https://www.iconfont.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里巴巴矢量图标&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;将下载的
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack便捷打包配置-4</title>
    <link href="http://yoursite.com/2019/06/27/webpack%E4%BE%BF%E6%8D%B7%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE-4/"/>
    <id>http://yoursite.com/2019/06/27/webpack便捷打包配置-4/</id>
    <published>2019-06-27T02:57:34.000Z</published>
    <updated>2019-06-27T07:35:18.334Z</updated>
    
    <content type="html"><![CDATA[<ul><li>html-webpack-plugin</li><li>clean-webpack-plugin</li></ul><p>前面我们打开文件一直用的自己写的入口文件 index.html 。在实际的开发生产过程中。需要把入口文件以及打包后的文件上传到服务器。这样我们每次都要把index.html文件放在打包文件夹里面，并且一个个去引入生成的js及css文件(ps:生成的文件名一般都带有hash值，来保证页面上引入的文件是最新的打包文件)这样会很麻烦。其实是有插件来帮我们做这些事情的。</p><ul><li>html-webpack-plugin 为打包的文件生成一个入口的html文件。默认index.html</li></ul><h3 id="1-html-webpack-plugin-插件"><a class="header-anchor" href="#1-html-webpack-plugin-插件">¶</a>1. html-webpack-plugin 插件</h3><p> </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ npm install --save-dev html-webpack-plugin</span></span><br></pre></td></tr></table></figure><p>webpack.config.js文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+   const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        module: &#123;&#125;,</span><br><span class="line"><span class="addition">+       plugins: [</span></span><br><span class="line"><span class="addition">+            new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+                title: 'mywebpackdemo',      //设置文档标题</span></span><br><span class="line"><span class="addition">+                filename: 'index.html',      //设置生成html文件的名字</span></span><br><span class="line"><span class="addition">+                template: './index.html'     // 如果想要生成的文件是你自己写的，就把你写的文件路径写在这，作为模板。这里我将根目录下的index.html作为模板</span></span><br><span class="line"><span class="addition">+            &#125;)</span></span><br><span class="line"><span class="addition">+       ],</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>index.html文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">    &lt;!-- 设置文档标题 --&gt;</span><br><span class="line"><span class="addition">+    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id="root"&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line"><span class="deletion">-    &lt;script src="./dist/main.js"&gt;&lt;/script&gt;     //去掉前面手动引入的文件</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> <br>现在打开命令行终端, 输入 打包命令： npm run dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打包完成后，在浏览器打开dist下面的index.html文件，可以看到生成的index.html已经自动为我们引入了main.js文件<br><img src="/images/webpack/10.png" alt="Alt"></p><p> </p><h3 id="1-clean-webpack-plugin-插件"><a class="header-anchor" href="#1-clean-webpack-plugin-插件">¶</a>1. clean-webpack-plugin 插件</h3><p>clean-webpack-plugin 一个清除文件的插件。 可以帮我们每次打包时，自动帮我们清除dist目录下面的原来的打包文件。</p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>webpack.config.js文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"><span class="addition">+   const &#123; CleanWabpckPlugin &#125; = require('clean-webpack-plugin');  //这里要注意下，这是webpack v4.32.1版本以上(包括v4.32.1) , CleanWabpckPlugin的引入方式。如引入错误，会提示  CleanWebpackPlugin is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+   const CleanWebpackPlugin = require('clean-webpack-plugin');   // 这是webpack v4.32.1版本以下的 引入方式。</span></span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        module: &#123;&#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new HtmlWebpackPlugin(&#123;</span><br><span class="line">                title: 'mywebpackdemo',      //设置文档标题</span><br><span class="line">                filename: 'index.html',      //设置生成html文件的名字</span><br><span class="line">                template: './index.html'     // 如果想要生成的文件是你自己写的，就把你写的文件路径写在这，作为模板。这里我将根目录下的index.html作为模板</span><br><span class="line">            &#125;),</span><br><span class="line"><span class="addition">+           new CleanWebpackPlugin(),</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了说明CleanWebpackPlugin 的作用，可以在dist里面多建几个文件</p><p> <br>然后打开命令行终端, 输入 打包命令： npm run dev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>打包完成后，可以看看刚才新建的文件是否都被删除了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;html-webpack-plugin&lt;/li&gt;
&lt;li&gt;clean-webpack-plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面我们打开文件一直用的自己写的入口文件 index.html 。在实际的开发生产过程中。需要把入口文件以及打包后的文件上传到服务器。
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack样式打包-3</title>
    <link href="http://yoursite.com/2019/06/04/webpack%E6%A0%B7%E5%BC%8F%E6%89%93%E5%8C%85-3/"/>
    <id>http://yoursite.com/2019/06/04/webpack样式打包-3/</id>
    <published>2019-06-04T04:48:50.000Z</published>
    <updated>2019-06-27T02:59:36.523Z</updated>
    
    <content type="html"><![CDATA[<p>这篇的重点：</p><ul><li>style-loader</li><li>css-loader</li><li>sass-loader</li><li>postcss-loader</li><li>添加厂商前缀</li></ul><p>写前端项目时，少不了写样式。这篇就看看css打包是如何配置的</p><h3 id="1-loader的执行顺序：从下到上-从右到左"><a class="header-anchor" href="#1-loader的执行顺序：从下到上-从右到左">¶</a>1.loader的执行顺序：从下到上，从右到左</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="addition">+   test: /\.css$/,</span></span><br><span class="line"><span class="addition">+      use: [</span></span><br><span class="line"><span class="addition">+         'style-loader',</span></span><br><span class="line"><span class="addition">+         'css-loader',</span></span><br><span class="line"><span class="addition">+         'sass-loader',</span></span><br><span class="line"><span class="addition">+         'less-loader',</span></span><br><span class="line"><span class="addition">+         'postcss-loader',</span></span><br><span class="line"><span class="addition">+      ]</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-css打包"><a class="header-anchor" href="#2-css打包">¶</a>2.css打包</h3><p>先来看下项目结构, 新建css文件以及index.css文件。我们需要的效果是将图片变小，并且偏移：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- images</span><br><span class="line">    |    |- 1.jpg</span><br><span class="line"><span class="addition">+    |- css      </span></span><br><span class="line"><span class="addition">+    |    |- index.css   //添加的样式文件</span></span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p><strong>index.css</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+.test &#123;</span></span><br><span class="line"><span class="addition">+    width: 200px;</span></span><br><span class="line"><span class="addition">+    height: 200px;</span></span><br><span class="line"><span class="addition">+    transform: translate(100px, 100px);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import yimg from "./images/1.jpg"</span><br><span class="line"><span class="addition">+import index from "./css/index.css"     // index.js引入样式文件</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line">var image = new Image();</span><br><span class="line">image.src = yimg;</span><br><span class="line"><span class="addition">+image.classList.add('test');     // 这里的test是index.css里面的类名</span></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">root.append(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改webpack配置 <strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line"><span class="addition">+        &#125;,&#123;</span></span><br><span class="line"><span class="addition">+            test: /\.css$/,</span></span><br><span class="line"><span class="addition">+            use: [</span></span><br><span class="line"><span class="addition">+                'style-loader',</span></span><br><span class="line"><span class="addition">+                'css-loader',</span></span><br><span class="line"><span class="addition">+            ]</span></span><br><span class="line"><span class="addition">+        &#125;]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<kbd>style-loader</kbd>      <kbd>css-loader</kbd>     <br>css-loader可以识别并打包css文件。style-loader 是将处理的样式挂载到页面上<br>文档移步这里： <a href="https://www.webpackjs.com/loaders/style-loader/" target="_blank" rel="noopener"><font color="#42A8E1">style-loader</font></a>      <a href="https://www.webpackjs.com/loaders/css-loader/" target="_blank" rel="noopener"><font color="#42A8E1">css-loader</font></a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开index.html就可以看到css已经有效果了<br><img src="/images/webpack/7.png" alt="Alt"></p><h3 id="3-scss打包"><a class="header-anchor" href="#3-scss打包">¶</a>3.scss打包</h3><p>效果是将scss文件进行编译打包，是图片顺时针转70度，修改文件目录结构，添加sass文件夹以及index.scss文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">    |- images</span><br><span class="line">    |    |- 1.jpg</span><br><span class="line">    |- css      </span><br><span class="line">    |    |- index.css   </span><br><span class="line"><span class="addition">+    |- scss      </span></span><br><span class="line"><span class="addition">+    |    |- index.scss   //添加的scss文件</span></span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p><strong>index.scss</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+body &#123;</span></span><br><span class="line"><span class="addition">+    .img &#123;</span></span><br><span class="line"><span class="addition">+        margin-top: 300px;</span></span><br><span class="line"><span class="addition">+        width: 200px;</span></span><br><span class="line"><span class="addition">+        height: 200px;</span></span><br><span class="line"><span class="addition">+        transform: rotate(70deg);</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import yimg from "./images/1.jpg"</span><br><span class="line">import index from "./css/index.css"    </span><br><span class="line"><span class="addition">+import avatar from "./sass/index.scss"    //引入index.scss文件</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line">var image = new Image();</span><br><span class="line">image.src = yimg;</span><br><span class="line"><span class="addition">+//image.classList.add('test');     </span></span><br><span class="line"><span class="addition">+    image.classList.add('img');    //将img类赋值到src上面</span></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">root.append(image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改webpack配置 <strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                'css-loader',</span><br><span class="line">            ]</span><br><span class="line"><span class="addition">+        &#125;,&#123;</span></span><br><span class="line"><span class="addition">+            test: /\.scss/,</span></span><br><span class="line"><span class="addition">+            use: [</span></span><br><span class="line"><span class="addition">+                'style-loader',</span></span><br><span class="line"><span class="addition">+                 &#123;</span></span><br><span class="line"><span class="addition">+                    loader: 'css-loader',      //css-loader</span></span><br><span class="line"><span class="addition">+                    options: &#123; </span></span><br><span class="line"><span class="addition">+                        importLoader: 2        //当index.scss文件中有导入 @import b.scss  文件时，需要重新加载css-loader的前面的loader插件</span></span><br><span class="line"><span class="addition">+                    &#125;</span></span><br><span class="line"><span class="addition">+                 &#125;</span></span><br><span class="line"><span class="addition">+                'scss-loader'      //将scss语法编译成css语法</span></span><br><span class="line"><span class="addition">+            ]</span></span><br><span class="line"><span class="addition">+         &#125;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<kbd>sass-loader</kbd>     <br>sass-loader将scss文件转译成css文件以让浏览器识别。<br>文档移步这里： <a href="https://www.webpackjs.com/loaders/sass-loader/" target="_blank" rel="noopener"><font color="#42A8E1">sass-loader</font></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><p> </p><p>安装完成后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开index.html就可以看到scss已经被成功的编译打包成css语法了<br><img src="/images/webpack/8.png" alt="Alt"></p><h3 id="4-postcss-loader-添加厂商前缀"><a class="header-anchor" href="#4-postcss-loader-添加厂商前缀">¶</a>4.postcss-loader 添加厂商前缀</h3><p>一般写样式的时候，我们为了兼容主流浏览器，都会在css3的新属性前加上厂商前缀。当项目变的很大的时候，手动去写就变的非常麻烦了。那么postcss-loader就是帮助我们加自动的添加前缀的。</p><p>新建postcss.config.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+module.exports = &#123;</span></span><br><span class="line"><span class="addition">+    plugins: [</span></span><br><span class="line"><span class="addition">+      require('autoprefixer')</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br></pre></td></tr></table></figure><p>修改webpack配置 <strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.jpg$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: 'url-loader',</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: '[name].[ext]?[hash]',</span><br><span class="line">                        publicPath: './dist/img',</span><br><span class="line">                        outputPath: 'img',</span><br><span class="line">                        limit: 204800,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.css$/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                'css-loader',</span><br><span class="line"><span class="addition">+               'postcss-loader',  </span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: /\.scss/,</span><br><span class="line">            use: [</span><br><span class="line">                'style-loader',</span><br><span class="line">                'css-loader',</span><br><span class="line"><span class="addition">+               'postcss-loader',  </span></span><br><span class="line">           &#125;,&#123;</span><br><span class="line">               test: /\.scss/,</span><br><span class="line">               use: [</span><br><span class="line">                 'style-loader',</span><br><span class="line">                   &#123;</span><br><span class="line">                    loader: 'css-loader',      </span><br><span class="line">                    options: &#123; </span><br><span class="line">                        importLoader: 2        </span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                'scss-loader',</span><br><span class="line"><span class="addition">+               'postcss-loader',      </span></span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<kbd>postcss-loader</kbd>     <br>postcss-loader自动添加厂商前缀。<br>文档移步这里： <a href="https://www.webpackjs.com/loaders/postcss-loader/" target="_blank" rel="noopener"><font color="#42A8E1">postcss-loader</font></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader</span><br></pre></td></tr></table></figure><p>安装 autoprefixer 插件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开index.html就可以看到transform前面已经自动加上了-webkit-<br><img src="/images/webpack/9.png" alt="Alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇的重点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;style-loader&lt;/li&gt;
&lt;li&gt;css-loader&lt;/li&gt;
&lt;li&gt;sass-loader&lt;/li&gt;
&lt;li&gt;postcss-loader&lt;/li&gt;
&lt;li&gt;添加厂商前缀&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写前端项目时，少不
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack图片打包-2</title>
    <link href="http://yoursite.com/2019/06/03/webpack%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85-2/"/>
    <id>http://yoursite.com/2019/06/03/webpack图片打包-2/</id>
    <published>2019-06-03T02:35:42.000Z</published>
    <updated>2019-06-04T09:43:23.090Z</updated>
    
    <content type="html"><![CDATA[<p>webpack只认识js文件和JSON文件，所以打包的时候默认是会对这两种类型的文件进行打包。但实际的项目中，除了js和JSON，还有css， img等文件。<br>这些文件就需要依赖loader来进行编译然后才能被浏览器识别并渲染出来。loader就是文件打包的一种解决方案。</p><p>下面我们要认识的是：</p><pre><code>图片打包css打包</code></pre><p>先来说图片打包，现在看下目录结构，新建images文件夹，随便下载一张图片放进去：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line"><span class="addition">+    |- images</span></span><br><span class="line"><span class="addition">+        |- 1.jpg</span></span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>在index.js文件中添加如下内容，目的是将图片引入进来<br><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import yimg from "./images/1.jpg"   //先将js引入进来</span></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line"></span><br><span class="line">var dom = document.createElement('div');</span><br><span class="line">var root = document.getElementById('root');</span><br><span class="line">dom.innerHTML = '这是我的测试博客';</span><br><span class="line"></span><br><span class="line"><span class="addition">+var image = new Image();    //创建img标签</span></span><br><span class="line"><span class="addition">+image.src = yimg;           // 将img的src属性设置成我们引入的图片</span></span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line"><span class="addition">+root.append(image);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于webpack默认不认识以jpg/png 这些后缀名结尾的文件，所以要在webpack.config.js中配置loader。修改webpack.config.js文件，<br>这里处理图片文件用file-loader。</p><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    module: &#123;      //是配置我们的模块规则</span></span><br><span class="line"><span class="addition">+       rules: [&#123;    //rules里面可以配置各种文件处理的规则</span></span><br><span class="line"><span class="addition">+           test: /\.jpg|png|jpeg|gif$/,     //匹配以jpg|png|jpeg|gif结尾的文件</span></span><br><span class="line"><span class="addition">+           use: [&#123;             //使用的loader</span></span><br><span class="line"><span class="addition">+                   loader: 'file-loader',    //这里用file-loader来处理图片</span></span><br><span class="line"><span class="addition">+                   options: &#123;                //options里面可以配置详细的处理信息</span></span><br><span class="line"><span class="addition">+                       name: '[name].[ext]?[hash]',     //  打包文件名</span></span><br><span class="line"><span class="addition">+                       publicPath: './dist/img',        //  打包的公共路径(ps:默认是在output.path下面)</span></span><br><span class="line"><span class="addition">+                       outputPath: 'img',               //  打包的文件放在img文件夹内。比如默认打包出来是在 dist/1.img。设置outpurpath就是dist/img/1.jpg</span></span><br><span class="line"><span class="addition">+                   &#125;</span></span><br><span class="line"><span class="addition">+               &#125;,</span></span><br><span class="line"><span class="addition">+           ]</span></span><br><span class="line"><span class="addition">+       &#125;]</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.webpackjs.com/loaders/file-loader/" target="_blank" rel="noopener"><font color="#42A8E1">file-loader</font></a>配置完成后，我们需要安装file-loader,  npm install file-loader --save-dev 或者 npm install file-loader -D 都可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure><p>安装完成之后，就可以在命令行输入我们之前配置好的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>这是打包完成目录及效果, 这个时候img被单独打包成一个文件：<br><img src="/images/webpack/3.png" alt="Alt"><br><img src="/images/webpack/4.png" alt="Alt"></p><p><strong>file-loader 打包的图片会被直接img引用，页面渲染的时候会发送请求。如果图片很小。页面中又有很多的时候时候，是很浪费下载通道的。<br>这个时候我们可以用<a href="https://www.webpackjs.com/loaders/url-loader/" target="_blank" rel="noopener"><font color="#42A8E1">url-loader</font></a>。<br><font color="#FB3838">url-loader: url-loader 功能类似于 file-loader，但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL。</font></strong></p><p>现在我们改下配置：<br><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: "development",</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: './src/index.js',</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;      //是配置我们的模块规则</span><br><span class="line">       rules: [&#123;    //rules里面可以配置各种文件处理的规则</span><br><span class="line">           test: /\.jpg|png|jpeg|gif$/,     //匹配以jpg|png|jpeg|gif结尾的文件</span><br><span class="line">           use: [&#123;             //使用的loader</span><br><span class="line"><span class="addition">+                   loader: 'url-loader',    //这里用url-loader来处理图片</span></span><br><span class="line">                    options: &#123;                </span><br><span class="line">                        name: '[name].[ext]?[hash]',     </span><br><span class="line">                        publicPath: './dist/img',        </span><br><span class="line">                        outputPath: 'img',               </span><br><span class="line"><span class="addition">+                       limit: 204800,                   //  当打包的图片文件小于204800Byte时, 将图片编译成base64的形式，进行打包。如果大于204800Byte时，则使用file-loader进行打包</span></span><br><span class="line">                    &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">           ]</span><br><span class="line">       &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: 'bundle.js',</span><br><span class="line">        path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们看在使用url-loader打包的效果，我们用的图片是45830Byte。所以图片会被打包进bundle.js里，不会被单独的打包成一个文件。在页面上我们可以看到img的路径是一个base64的字符串：<br><img src="/images/webpack/5.png" alt="Alt"><br><img src="/images/webpack/6.png" alt="Alt"></p><p>图片打包常用的就file-loader 和 url-loader 了，更多的可以查文档:<a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener"><font color="#42A8E1">https://www.webpackjs.com/loaders/</font></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;webpack只认识js文件和JSON文件，所以打包的时候默认是会对这两种类型的文件进行打包。但实际的项目中，除了js和JSON，还有css， img等文件。&lt;br&gt;
这些文件就需要依赖loader来进行编译然后才能被浏览器识别并渲染出来。loader就是文件打包的一种解决
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础配置-1</title>
    <link href="http://yoursite.com/2019/05/30/webpack%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE-1/"/>
    <id>http://yoursite.com/2019/05/30/webpack基础配置-1/</id>
    <published>2019-05-30T04:46:36.000Z</published>
    <updated>2019-06-03T02:37:19.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-webpack配置"><a class="header-anchor" href="#1-webpack配置">¶</a>1.webpack配置</h3><p>打开我们在上文中操作的文件夹，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>为了后期文件便于管理，并且webpack的默认配置的打包入口文件就是src文件夹下的index.js文件。现在我们调整下文件结构。将index.js放在src目录下。<br>调整完成后应该是下面这样：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- dist</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line"><span class="addition">+  |- index.js</span></span><br><span class="line">|- index.html</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>现在我们运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>这块webpack后面没有写入口文件，所以用的webpack默认的打包配置。</p><h3 id="2-现在我们手写下基础配置-在根目录下新建webpack-config-js配置文件-写入下面内容"><a class="header-anchor" href="#2-现在我们手写下基础配置-在根目录下新建webpack-config-js配置文件-写入下面内容">¶</a>2.现在我们手写下基础配置，在根目录下新建webpack.config.js配置文件,写入下面内容</h3><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);   <span class="comment">//引入node中的path模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;     <span class="comment">//将整个模块导出</span></span><br><span class="line">    entry: &#123;           <span class="comment">//入口文件</span></span><br><span class="line">        main: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;          <span class="comment">//打包输出路径</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,      <span class="comment">//打包输出的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)    <span class="comment">//打包生成的文件夹，path必须是绝对路径,  __dirname返回当前文件的绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack webpack.config.js</span><br></pre></td></tr></table></figure><p>Entrypoint main = bundle.js说明我们的配置生效了<br><img src="/images/webpack/1.png" alt="Alt"></p><h3 id="3-配置运行命令"><a class="header-anchor" href="#3-配置运行命令">¶</a>3.配置运行命令</h3><p>npx webpack webpack.config.js  每次编译需要输入这么一长串。现在我们可以优化下命令<br>打开webpack.json，自定义不同mode下的打包命令，加上下面的两条命令，就ok了</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+    "dev": "webpack --mode=development",</span></span><br><span class="line"><span class="addition">+    "prod": "webpack --mode=production"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "webpack": "^4.32.2",</span><br><span class="line">    "webpack-cli": "^3.3.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>下面的界面说明我们打包成功了。同样也可以运行 npm run prod,打包生产环境的代码。(ps: dev环境下打包的代码不会被压缩。prod环境下打包的代码会被压缩)<br><img src="/images/webpack/2.png" alt="Alt"></p><p>以上我们就建好了基础配置，更多的配置可以查阅官方文档：<br><a href="https://webpack.docschina.org/api/cli/#%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener"><font color="#42A8E1">webpack配置文档</font></a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-webpack配置&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-webpack配置&quot;&gt;¶&lt;/a&gt;1.webpack配置&lt;/h3&gt;
&lt;p&gt;打开我们在上文中操作的文件夹，&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack基础</title>
    <link href="http://yoursite.com/2019/05/29/webpack%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/05/29/webpack安装/</id>
    <published>2019-05-29T04:26:26.000Z</published>
    <updated>2019-05-30T07:31:27.525Z</updated>
    
    <content type="html"><![CDATA[<p>从这篇开始，会不定期更新webpack教程。希望能帮到在路上的小伙伴<br><a href="https://webpack.js.org/" target="_blank" rel="noopener"><font color="#42A8E1">webpack文档</font></a>.</p><p>准备：1.安装node.js环境并配置好</p><h3 id="安装webpack"><a class="header-anchor" href="#安装webpack">¶</a>安装webpack</h3><p>tip: 安装之前一定要先安装node <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener"><font color="#42A8E1">node官网</font></a>.</p><h5 id="1-新建文件夹并进入"><a class="header-anchor" href="#1-新建文件夹并进入">¶</a>1. 新建文件夹并进入</h5><p>打开命令框工具，输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>现在文件夹下会生成一个package.json文件，这个文件包含项目基本信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// &lt;!-- package.json --&gt;</span><br><span class="line">&#123;</span><br><span class="line">  "name": "webpackdemo",  // 项目名称</span><br><span class="line">  "version": "1.0.0",     // 项目版本</span><br><span class="line">  "description": "",      // 描述</span><br><span class="line">  "main": "index.js",     // 执行的入口文件</span><br><span class="line">  "scripts": &#123;            // 配置项目命令</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],       // 关键字</span><br><span class="line">  "author": "",         // 作者(这里指开发者)</span><br><span class="line">  "license": "ISC",     // 标准(这个默认就ok)</span><br><span class="line">  "dependencies": &#123;     // 生产环境需要的依赖包</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  "devDependencies": &#123;  // 本地开发需要的依赖</span><br><span class="line">    "webpack": "^4.32.2",   // 安装包</span><br><span class="line">    "webpack-cli": "^3.3.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来安装webpack,2种方法，一种是全局安装(通常我们不建议全局安装，因为每个项目需要的webpack版本可能会有不同，这里我们只说项目内安装)，<br>一种是项目内安装。</p><h5 id="项目内安装"><a class="header-anchor" href="#项目内安装">¶</a>项目内安装</h5><p>npm install webpack webpack-cli --save-dev 等同于<br>npm install webpack webpack-cli -D</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>安装完成后，输入 npx webpack -v 出现版本号说明安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack -v</span><br></pre></td></tr></table></figure><h3 id="现在新建文件-来体验下文件打包是什么样的"><a class="header-anchor" href="#现在新建文件-来体验下文件打包是什么样的">¶</a>现在新建文件，来体验下文件打包是什么样的</h3><p>在文件夹的根目录下新建 index.html 文件，以及src文件夹。在src文件夹下面新建 index.js文件，并将下面相应的代码复制</p><h6 id="index-html"><a class="header-anchor" href="#index-html">¶</a>index.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>欢迎来到蔓羊博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的dist 以及main.js 会在后面操作打包生成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="index-js"><a class="header-anchor" href="#index-js">¶</a>index.js</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><br><span class="line">dom.innerHTML = <span class="string">'这是我的测试博客'</span>;</span><br><span class="line"></span><br><span class="line">root.appendChild(dom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在项目目录应该是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpackdemo</span><br><span class="line">|- node-modules</span><br><span class="line">|- src</span><br><span class="line">|- index.html</span><br><span class="line">|- index.js</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br></pre></td></tr></table></figure><p>建好了之后，打开git命令行工具，输入下面的命令。这个时候根目录下面会生成一个dist文件夹(ps:也就是通常所说的打包之后的文件)bi<br>这个时候可以在浏览器打开index.html,显示正常，说明打包成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack index.js</span><br></pre></td></tr></table></figure><p>npx：是webpack内置的打包命令。打包配置文件也是webpack默认的打包配置</p><p>以上就是webpack入门，想了解更多，请移步下篇文章 😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从这篇开始，会不定期更新webpack教程。希望能帮到在路上的小伙伴&lt;br&gt;
&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font color=&quot;#42A8E1&quot;&gt;webpack文档&lt;/
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>无插件上拉加载</title>
    <link href="http://yoursite.com/2019/03/27/%E6%97%A0%E6%8F%92%E4%BB%B6%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/03/27/无插件上拉加载/</id>
    <published>2019-03-27T02:19:27.000Z</published>
    <updated>2019-03-27T03:51:28.987Z</updated>
    
    <content type="html"><![CDATA[<p>在写这篇文档之前，自己也写过移动端的上拉加载，不过一直以来都是用插件。<br>这次有时间吧原理好好梳理下；</p><h3 id="原理："><a class="header-anchor" href="#原理：">¶</a>原理：</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190327103242.jpg" alt="提示图片"></p><p><strong>浏览器内容高度(随内容多少变化)：</strong> document.documentelement.scrollHeight(ie的scrollHeight为document.body.scrollHeight)<br><strong>滚动条的高度：</strong> dooument.documentelement.scrollTop(ie的scrollTop为document.body.scrollTop)<br><strong>设备网页的可见高度(很多人说是设备的高度，自己斟酌)：</strong> widnow.screen.height</p><p>所以，当document.documentelement.scrollHeight = dooument.documentelement.scrollTop + widnow.screen.height时，就是滑到底部，需要请求下一页数据的时候</p><p>下面是核心代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> screenHeight = <span class="built_in">window</span>.screen.height;</span><br><span class="line"><span class="keyword">var</span> scrollHeight = <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面的10是在滑动在距离底部10px的时候,触发下一页数据请求.可自行调节</span></span><br><span class="line"><span class="keyword">if</span>(scrollHeight - (screenHeight + scrollTop) &lt; <span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面就是请求下一页数据的逻辑了，自行发挥</span></span><br><span class="line"> <span class="keyword">var</span> htmlt = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"> htmlt = htmlt + <span class="string">'&lt;p&gt;'</span> + arr[i] + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> box = $(<span class="string">'.box'</span>).html()</span><br><span class="line"> $(<span class="string">'.box'</span>).html(box + htmlt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好用的话记得star呀~~😛<br>[上拉滚动 demo git地址]<a href="https://github.com/yagmdream/scroll" target="_blank" rel="noopener">https://github.com/yagmdream/scroll</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写这篇文档之前，自己也写过移动端的上拉加载，不过一直以来都是用插件。&lt;br&gt;
这次有时间吧原理好好梳理下；&lt;/p&gt;
&lt;h3 id=&quot;原理：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#原理：&quot;&gt;¶&lt;/a&gt;原理：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo搭建博客基础教程</title>
    <link href="http://yoursite.com/2019/03/21/%E5%85%A5%E9%97%A8%E7%BA%A7github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/21/入门级github-hexo搭建博客教程/</id>
    <published>2019-03-21T08:55:01.000Z</published>
    <updated>2019-05-30T07:24:01.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备：1-安装node-js环境并配置好"><a class="header-anchor" href="#准备：1-安装node-js环境并配置好">¶</a>准备：1.安装node.js环境并配置好</h3><p>配置好之后，window + R 打开运行窗口，输入如下命令。出现版本号则说明安装成功<br><img src="/images/aimg/X8EGWAL%5DP36%25_FX67%25RR14N.png" alt="提示图片"><br> </p><h3 id="2-github注册并新建一个仓库-仓库名必须和用户名相同-格式遵守：用户名-github-io"><a class="header-anchor" href="#2-github注册并新建一个仓库-仓库名必须和用户名相同-格式遵守：用户名-github-io">¶</a>2.github注册并新建一个仓库，仓库名<strong>必须</strong>和用户名相同，格式遵守：<a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener">用户名.github.io</a></h3><p><img src="/images/aimg/E2DBKLD83MNS$%60YR7J3CVHM.png" alt="提示图片"><br>点击确定，仓库就建好了。<br> </p><h3 id="3-在仓库上面最右边的菜单点击setting"><a class="header-anchor" href="#3-在仓库上面最右边的菜单点击setting">¶</a>3.在仓库上面最右边的菜单点击setting</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190321174232.png" alt="提示图片"><br>然后向下拉到Github Pages,圈出的地方会有个网址（ps: 我这个是做了自定义域名），打开那个网址。你会发现项目在网络上可以打开了<br><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190321174527.png" alt="提示图片"><br> </p><h3 id="4-下来我们开始搭建安装hexo"><a class="header-anchor" href="#4-下来我们开始搭建安装hexo">¶</a>4.下来我们开始搭建安装Hexo</h3><p>新建一个文件夹，进入文件夹，右键点击Git Bash Here打开命令行工具<br>输入命令, 开始全局安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190321181657.png" alt="提示图片"><br>安装完成之后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>出现下图，则安装成功<br><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190321182834.png" alt="提示图片"><br> </p><h3 id="5-输入hexo-init进行项目初始化"><a class="header-anchor" href="#5-输入hexo-init进行项目初始化">¶</a>5.输入hexo init进行项目初始化</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322120238.png" alt="提示图片"><br>出现下图 ，则说明项目初始化成功<br><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322120323.png" alt="提示图片"><br> </p><h3 id="6-然后输入npm-install安装所需的组件"><a class="header-anchor" href="#6-然后输入npm-install安装所需的组件">¶</a>6.然后输入npm install安装所需的组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p> </p><h3 id="7-安装完成-就可以查看我们本地的博客了-输入："><a class="header-anchor" href="#7-安装完成-就可以查看我们本地的博客了-输入：">¶</a>7.安装完成，就可以查看我们本地的博客了，输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开圈出的地址：就能查看我们的博客雏形了😄<br><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322121118.png" alt="提示图片"><br>打开后正常应该是下面酱紫滴😝<br><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322121442.png" alt="提示图片"></p><p> </p><h2 id="下来我们将博客放在我们github网址能访问的地方"><a class="header-anchor" href="#下来我们将博客放在我们github网址能访问的地方">¶</a>下来我们将博客放在我们github网址能访问的地方</h2><h3 id="添加ssh-ps-这个是为了我们方便的将文章发布上去-如果之前有添加过ssh-则略过"><a class="header-anchor" href="#添加ssh-ps-这个是为了我们方便的将文章发布上去-如果之前有添加过ssh-则略过">¶</a>添加ssh(ps:这个是为了我们方便的将文章发布上去)，如果之前有添加过ssh，则略过</h3><figure class="highlight plain"><figcaption><span>进入ssh文件夹</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cs ~/.ssh</span><br></pre></td></tr></table></figure><p> </p><h3 id="输入ls-查看是否有id-rsa-id-rsa-pub-这两个文件夹"><a class="header-anchor" href="#输入ls-查看是否有id-rsa-id-rsa-pub-这两个文件夹">¶</a>输入ls 查看是否有id_rsa，id_rsa.pub 这两个文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p> </p><h3 id="如果没有-就输入下面的命令-然后回车-过程中会要求你输入github的账号和密码"><a class="header-anchor" href="#如果没有-就输入下面的命令-然后回车-过程中会要求你输入github的账号和密码">¶</a>如果没有，就输入下面的命令，然后回车。过程中会要求你输入github的账号和密码。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的github邮箱&quot;</span><br></pre></td></tr></table></figure><p> </p><h3 id="输入完成之后-查看你的"><a class="header-anchor" href="#输入完成之后-查看你的">¶</a>输入完成之后。查看你的</h3><p>C:\Users\hasee.ssh (ps:我的是这个) 大部分人应该是这个 C:\Users\window.ssh 文件件下面找到id_rsa.pub文件。<br>打开并复制里面的全部内容。然后登陆你的github,点击头像,选择settings<br><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322150905.png" alt="提示图片"><br> </p><h3 id="选择左侧边栏的ssh-and-gpg-keys-点击new-ssh-keys"><a class="header-anchor" href="#选择左侧边栏的ssh-and-gpg-keys-点击new-ssh-keys">¶</a>选择左侧边栏的SSH and GPG keys,点击New SSH keys</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322151217.png" alt="提示图片"><br> </p><h3 id="添加完成之后-输入下面的命令-看看是否添加成功"><a class="header-anchor" href="#添加完成之后-输入下面的命令-看看是否添加成功">¶</a>添加完成之后，输入下面的命令。看看是否添加成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p> </p><h3 id="出现下面的提示-说明已经添加成功"><a class="header-anchor" href="#出现下面的提示-说明已经添加成功">¶</a>出现下面的提示，说明已经添加成功</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322153218.png" alt="提示图片"><br> </p><h3 id="部署设置-在项目的根目录下找到-config-yml-文件-打开-拉到最下面-修改repository为你github博客的ssh"><a class="header-anchor" href="#部署设置-在项目的根目录下找到-config-yml-文件-打开-拉到最下面-修改repository为你github博客的ssh">¶</a>部署设置，在项目的根目录下找到_config.yml 文件，打开，拉到最下面，修改repository为你github博客的ssh</h3><p><img src="/images/aimg/TIM%E5%9B%BE%E7%89%8720190322155642.png" alt="提示图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yagmdream/yagmdream.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p> </p><h3 id="现在可以准备部署文章了-安装部署插件"><a class="header-anchor" href="#现在可以准备部署文章了-安装部署插件">¶</a>现在可以准备部署文章了，安装部署插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p> </p><h3 id="安装完成之后-输入hexo-d-g-生成及部署文章"><a class="header-anchor" href="#安装完成之后-输入hexo-d-g-生成及部署文章">¶</a>安装完成之后，输入hexo d -g  生成及部署文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>现在可以线上访问： 用户名.github.io的地址 查看博客了😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备：1-安装node-js环境并配置好&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#准备：1-安装node-js环境并配置好&quot;&gt;¶&lt;/a&gt;准备：1.安装node.js环境并配置好&lt;/h3&gt;
&lt;p&gt;配置好之后，window + R 打开运行窗
      
    
    </summary>
    
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>mint-ui的cdn使用</title>
    <link href="http://yoursite.com/2019/03/20/mint-ui%E7%9A%84cdn%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/20/mint-ui的cdn使用/</id>
    <published>2019-03-20T10:17:25.000Z</published>
    <updated>2019-03-20T10:17:55.861Z</updated>
    
    <content type="html"><![CDATA[<p><strong>mint-ui</strong>平时使用多的经常是在类似 vue-cli 搭建好的框架中用import 引入，那如果我们cdn直接引入 <strong>script</strong> 。那里面的消息框该怎么用呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/Public/app_car_sales/css_v1_1/mint.ui.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/Public/app_car_sales/js_v1_1/mint.ui.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>toast、message调用看下面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 new Vue 对象的方法中直接调用就可以了</span></span><br><span class="line"><span class="keyword">this</span>.$toast(<span class="string">'这是一个提示窗'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//message同理（全拼全部小写）</span></span><br><span class="line"><span class="keyword">this</span>.$messagebox(&#123;</span><br><span class="line">     title: <span class="string">'提示'</span>,</span><br><span class="line">     message: <span class="string">'这是一个有确定按钮的弹窗'</span>,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;mint-ui&lt;/strong&gt;平时使用多的经常是在类似 vue-cli 搭建好的框架中用import 引入，那如果我们cdn直接引入 &lt;strong&gt;script&lt;/strong&gt; 。那里面的消息框该怎么用呢？&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
    
      <category term="mint-ui" scheme="http://yoursite.com/tags/mint-ui/"/>
    
  </entry>
  
  <entry>
    <title>react-super理解</title>
    <link href="http://yoursite.com/2019/03/20/react-super%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/03/20/react-super理解/</id>
    <published>2019-03-20T10:15:41.000Z</published>
    <updated>2019-03-20T10:38:10.505Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看react的文档，发现react的逻辑都是以component为基础的。<br>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在es6中class的继承是通过extends关键字实现的。constructor 是类默认的构造方法。那么<strong>super</strong>是做什么用的？<br> </p><h3 id="1-有super-or-无super"><a class="header-anchor" href="#1-有super-or-无super">¶</a>1.有super() or 无super()</h3><hr><p>我们现在注释掉super(props)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="comment">//super(props);</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/aimg/2019022016090287.png" alt="提示图片"><br>提示this不存在，就是说super是子类为了继承父类的this。<br><strong>子类是没有自己的this的，它只能继承父类的this对象，然后对其操作。而super就是将父类的this继承给子类的。没有super，子类是无法拿到this对象的。</strong></p><p>所以我们这样写 super()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出this为：<br><img src="/images/aimg/2019022016190517.png" alt="结果"><br> </p><h3 id="2-super-props-or-super"><a class="header-anchor" href="#2-super-props-or-super">¶</a>2.super(props) or super()</h3><hr><p>现在我们打印下 <strong>this.props</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/aimg/2019022016282444.png" alt="this.props"><br>现在是可以正常打印出结果的，现在将super中的props删掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/aimg/20190220163402157.png" alt="/images/aimg/20190220163402157.png"><br>也就是说，如果我们想在constructor中使用props，super中就必须要带参数。否则是无法拿到值的。</p><p>所以还是建议，不论constructor中是否用到props ， 都这样写super(props); 这样不论什么情况都不会有拿不到值或者报错的情况</p><p>先写到这吧，要是有别的认知再来补充😝😝~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看react的文档，发现react的逻辑都是以component为基础的。&lt;br&gt;
比如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react初识</title>
    <link href="http://yoursite.com/2019/02/20/react%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2019/02/20/react初识/</id>
    <published>2019-02-20T04:25:48.000Z</published>
    <updated>2019-03-21T04:38:26.637Z</updated>
    
    <content type="html"><![CDATA[<p>新年伊始，领导说后面相面考虑用react开发，最近看了react的文档。真心话，觉得好复杂。个人想法ps: 也可能是因为之前用的vue，一时半会转不过来的原因 。希望不会有人打我😂</p><hr><h6 id="话不多说-我们先来感受下"><a class="header-anchor" href="#话不多说-我们先来感受下">¶</a>话不多说 我们先来感受下</h6><p>注意：react对node版本有要求:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node &gt;= 6 and npm &gt;= 5.2</span><br></pre></td></tr></table></figure><p>首先先<strong>全局</strong>安装create-react-app这个脚手架， 为了后续执行命令用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><p>然后开始创建我们的第一个react项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app myapp   //myapp是项目名</span><br></pre></td></tr></table></figure><p>创建完成之后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myapp   //进入项目</span><br><span class="line">yarn start   //运行  用npm start 也可以，个人习惯</span><br></pre></td></tr></table></figure><p>如果出现下面这个提示，说明3000端口被占用，找到这个运行的程序关掉就ok<br><img src="https://img-blog.csdnimg.cn/20190220143532247.png" alt="报错图片"><br>然后重新运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>出现这个，我们的项目就顺利建成了<br><img src="https://img-blog.csdnimg.cn/20190220143822771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQwMjU3Nzg3,size_16,color_FFFFFF,t_70" alt="react demo">🙈🙈🙈~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新年伊始，领导说后面相面考虑用react开发，最近看了react的文档。真心话，觉得好复杂。个人想法ps: 也可能是因为之前用的vue，一时半会转不过来的原因 。希望不会有人打我😂&lt;/p&gt;
&lt;hr&gt;
&lt;h6 id=&quot;话不多说-我们先来感受下&quot;&gt;&lt;a class=&quot;head
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>markdowm表情包</title>
    <link href="http://yoursite.com/2019/02/20/markdowm%E8%A1%A8%E6%83%85%E5%8C%85/"/>
    <id>http://yoursite.com/2019/02/20/markdowm表情包/</id>
    <published>2019-02-20T02:32:19.000Z</published>
    <updated>2019-03-21T03:40:08.007Z</updated>
    
    <content type="html"><![CDATA[<p>markdown可以添加表情了😂</p><hr><p>更多表情戳这里：<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a><br><img src="https://img-blog.csdnimg.cn/20190220150403842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQwMjU3Nzg3,size_16,color_FFFFFF,t_70" alt="emoij图片库"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;markdown可以添加表情了😂&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;更多表情戳这里：&lt;a href=&quot;https://www.webpagefx.com/tools/emoji-cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:/
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>node创建一个服务</title>
    <link href="http://yoursite.com/2019/02/11/node%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/02/11/node创建一个服务/</id>
    <published>2019-02-11T08:04:11.000Z</published>
    <updated>2019-03-21T08:06:09.689Z</updated>
    
    <content type="html"><![CDATA[<h6 id="node创建一个服务"><a class="header-anchor" href="#node创建一个服务">¶</a>node创建一个服务</h6><p>在创建服务之前，要先安装node以及npm包管理（现在的node都带有默认的npm包管理）</p><p><strong>通过这个demo演示创建服务的过程</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//创建一个服务</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line"><span class="comment">//request 请求体</span></span><br><span class="line"><span class="comment">//response 响应体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//writeHead 设置请求头</span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html; charset = utf-8'</span>&#125;)</span><br><span class="line"><span class="comment">//默认一般会有2次访问。即页面选项卡前的图标，一般建议过滤掉</span></span><br><span class="line"><span class="keyword">if</span>(request.url !== <span class="string">'/favicon.ico'</span>)&#123;  </span><br><span class="line"><span class="comment">//在控制台打印</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line"><span class="comment">//网页打印</span></span><br><span class="line">response.write(<span class="string">'hello world'</span>);</span><br><span class="line"><span class="comment">//控制台打印出请求体</span></span><br><span class="line"><span class="built_in">console</span>.log(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求完成之后，要结束响应</span></span><br><span class="line">response.end(<span class="string">'你好，世界'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8000</span>);  <span class="comment">//listen 监听本地8000端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提示监听的端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server runningat http://127.0.0.1:8000'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;node创建一个服务&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#node创建一个服务&quot;&gt;¶&lt;/a&gt;node创建一个服务&lt;/h6&gt;
&lt;p&gt;在创建服务之前，要先安装node以及npm包管理（现在的node都带有默认的npm包管理）&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>加入购物车动画-基于fly.js插件</title>
    <link href="http://yoursite.com/2019/01/14/%E5%8A%A0%E5%85%A5%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%A8%E7%94%BB-%E5%9F%BA%E4%BA%8Efly-js%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/14/加入购物车动画-基于fly-js插件/</id>
    <published>2019-01-14T08:30:57.000Z</published>
    <updated>2019-03-21T08:31:39.200Z</updated>
    
    <content type="html"><![CDATA[<p>购物车飞入动画基于jquery的 fly.js插件,只需设置起点和终点的坐标即可，抛物线由fly.js来完成</p><p>资源下载地址：[<a href="https://github.com/amibug/fly" target="_blank" rel="noopener">https://github.com/amibug/fly</a>]<a href="https://github.com/amibug/fly" target="_blank" rel="noopener">https://github.com/amibug/fly</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>飞入动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .test&#123;background: red;width: 50px;height:50px;&#125;</span></span><br><span class="line"><span class="undefined">.box &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 1000px;</span></span><br><span class="line"><span class="undefined">background: #eee;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>飞入插件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"fly.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 飞到的终点的坐标</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> globalLeft = $(<span class="string">'.box'</span>).offset().left;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> globalTop = $(<span class="string">'.box'</span>).offset().top - $(<span class="built_in">document</span>).scrollTop() + <span class="number">1000</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//绑定点击事件</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">'.box'</span>).on(<span class="string">'click'</span>, fly);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 飞入执行 --&gt;</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fly</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> flyer = $(<span class="string">'&lt;div class="test"&gt;&lt;/div&gt;'</span>);</span></span><br><span class="line"><span class="undefined">flyer.fly(&#123;</span></span><br><span class="line"><span class="undefined">start: &#123;</span></span><br><span class="line"><span class="undefined">left: event.pageX, </span></span><br><span class="line"><span class="javascript">top: event.pageY-$(<span class="built_in">document</span>).scrollTop()</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">end: &#123;</span></span><br><span class="line"><span class="undefined">top: globalTop, </span></span><br><span class="line"><span class="undefined">left: globalLeft, </span></span><br><span class="line"><span class="undefined">width: 0, </span></span><br><span class="line"><span class="undefined">height: 0,</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="javascript">onEnd: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.destroy();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;购物车飞入动画基于jquery的 fly.js插件,只需设置起点和终点的坐标即可，抛物线由fly.js来完成&lt;/p&gt;
&lt;p&gt;资源下载地址：[&lt;a href=&quot;https://github.com/amibug/fly&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery.range双滑块范围选择</title>
    <link href="http://yoursite.com/2019/01/14/jQuery-range%E5%8F%8C%E6%BB%91%E5%9D%97%E8%8C%83%E5%9B%B4%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2019/01/14/jQuery-range双滑块范围选择/</id>
    <published>2019-01-14T08:22:28.000Z</published>
    <updated>2019-03-21T08:23:18.716Z</updated>
    
    <content type="html"><![CDATA[<p>基于jquery的双滑块范围选择插件jquery.range.js</p><p>效果（颜色默认为绿色，这里我改了本地的css文件）：<br><img src="https://img-blog.csdnimg.cn/20190321161808933.png" alt="在这里插入图片描述"></p><hr><p>1.首先载入jquery以及range插件相关文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"range.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"range.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.然后在需要展示滑块的地方放入下面代码（这里设置默认范围值为 0,80 ）：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"0, 80"</span> <span class="attr">id</span>=<span class="string">"range"</span>  <span class="attr">class</span>=<span class="string">"slider-input"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>3.在js中写入下面部分：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">'.slider-input'</span>).jRange(&#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="number">0</span>,   <span class="comment">//滑块范围的初始值</span></span><br><span class="line">        to: <span class="number">80</span>,    <span class="comment">//滑块范围的终止值</span></span><br><span class="line">        step: <span class="number">1</span>,   <span class="comment">//设置步长</span></span><br><span class="line">        scale: [<span class="number">0</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">80</span>], <span class="comment">//滑动条下方的尺度变标签</span></span><br><span class="line">        format: <span class="string">'%s'</span>,  <span class="comment">//数值格式</span></span><br><span class="line">        width: <span class="number">300</span>, <span class="comment">//进度条的宽度</span></span><br><span class="line">        showLabels: <span class="literal">true</span>,  <span class="comment">//是否显示滑动条下方的尺寸标签</span></span><br><span class="line">        showScale: <span class="literal">false</span>,  <span class="comment">//是否显示滑块上方的数值标签</span></span><br><span class="line">        isRange: <span class="literal">true</span>,     <span class="comment">//是否为选取范围</span></span><br><span class="line">        onstatechange: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;    <span class="comment">//滑块范围改变时触发的方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.slider-input'</span>).jRange(<span class="string">'setValue'</span>, <span class="string">'25, 50'</span>);  <span class="comment">//滑块赋值</span></span><br></pre></td></tr></table></figure><p>上面的设置在文档中也有详细的描述，基本都可以满足我们的需求<br>jquery.range文档参考：<a href="https://github.com/nitinhayaran/jRange" target="_blank" rel="noopener">https://github.com/nitinhayaran/jRange</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于jquery的双滑块范围选择插件jquery.range.js&lt;/p&gt;
&lt;p&gt;效果（颜色默认为绿色，这里我改了本地的css文件）：&lt;br&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20190321161808933.png&quot; alt=
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
